{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6e866946",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:11.354006Z",
     "iopub.status.busy": "2024-05-01T02:04:11.353139Z",
     "iopub.status.idle": "2024-05-01T02:04:12.274848Z",
     "shell.execute_reply": "2024-05-01T02:04:12.273997Z"
    },
    "papermill": {
     "duration": 0.946624,
     "end_time": "2024-05-01T02:04:12.277200",
     "exception": false,
     "start_time": "2024-05-01T02:04:11.330576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/store-sales-time-series-forecasting/oil.csv\n",
      "/kaggle/input/store-sales-time-series-forecasting/sample_submission.csv\n",
      "/kaggle/input/store-sales-time-series-forecasting/holidays_events.csv\n",
      "/kaggle/input/store-sales-time-series-forecasting/stores.csv\n",
      "/kaggle/input/store-sales-time-series-forecasting/train.csv\n",
      "/kaggle/input/store-sales-time-series-forecasting/test.csv\n",
      "/kaggle/input/store-sales-time-series-forecasting/transactions.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os \n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f0a350f",
   "metadata": {
    "papermill": {
     "duration": 0.01753,
     "end_time": "2024-05-01T02:04:12.315242",
     "exception": false,
     "start_time": "2024-05-01T02:04:12.297712",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For this project, I'm using the Darts library which enables me to deal with TimeSeries easier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d7b32bb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:12.353066Z",
     "iopub.status.busy": "2024-05-01T02:04:12.352531Z",
     "iopub.status.idle": "2024-05-01T02:04:34.826288Z",
     "shell.execute_reply": "2024-05-01T02:04:34.824687Z"
    },
    "papermill": {
     "duration": 22.496043,
     "end_time": "2024-05-01T02:04:34.829083",
     "exception": false,
     "start_time": "2024-05-01T02:04:12.333040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!pip install darts==0.23.1 &> /dev/null"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09ca13eb",
   "metadata": {
    "papermill": {
     "duration": 0.017605,
     "end_time": "2024-05-01T02:04:34.864758",
     "exception": false,
     "start_time": "2024-05-01T02:04:34.847153",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e19a59fc",
   "metadata": {
    "papermill": {
     "duration": 0.018172,
     "end_time": "2024-05-01T02:04:34.901428",
     "exception": false,
     "start_time": "2024-05-01T02:04:34.883256",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Firstly, I load all of the files into DataFrames which I then display so I can have an understanding of what i'm dealing with."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "061408d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:34.939276Z",
     "iopub.status.busy": "2024-05-01T02:04:34.938854Z",
     "iopub.status.idle": "2024-05-01T02:04:38.437400Z",
     "shell.execute_reply": "2024-05-01T02:04:38.436068Z"
    },
    "papermill": {
     "duration": 3.521234,
     "end_time": "2024-05-01T02:04:38.440440",
     "exception": false,
     "start_time": "2024-05-01T02:04:34.919206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#### Load all Datasets\n",
    "df_train = pd.read_csv('../input/store-sales-time-series-forecasting/train.csv')\n",
    "df_test = pd.read_csv('../input/store-sales-time-series-forecasting/test.csv')\n",
    "df_holidays_events = pd.read_csv('../input/store-sales-time-series-forecasting/holidays_events.csv')\n",
    "df_oil = pd.read_csv('../input/store-sales-time-series-forecasting/oil.csv')\n",
    "df_stores = pd.read_csv('../input/store-sales-time-series-forecasting/stores.csv')\n",
    "df_transactions = pd.read_csv('../input/store-sales-time-series-forecasting/transactions.csv')\n",
    "df_sample_submission = pd.read_csv('../input/store-sales-time-series-forecasting/sample_submission.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e56aacd",
   "metadata": {
    "papermill": {
     "duration": 0.01801,
     "end_time": "2024-05-01T02:04:38.477311",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.459301",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**train.csv**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "24df97b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:38.517443Z",
     "iopub.status.busy": "2024-05-01T02:04:38.516953Z",
     "iopub.status.idle": "2024-05-01T02:04:38.546023Z",
     "shell.execute_reply": "2024-05-01T02:04:38.544800Z"
    },
    "papermill": {
     "duration": 0.052863,
     "end_time": "2024-05-01T02:04:38.548639",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.495776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>store_nbr</th>\n",
       "      <th>family</th>\n",
       "      <th>sales</th>\n",
       "      <th>onpromotion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>BABY CARE</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>BEAUTY</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>BEVERAGES</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>BOOKS</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id        date  store_nbr      family  sales  onpromotion\n",
       "0   0  2013-01-01          1  AUTOMOTIVE    0.0            0\n",
       "1   1  2013-01-01          1   BABY CARE    0.0            0\n",
       "2   2  2013-01-01          1      BEAUTY    0.0            0\n",
       "3   3  2013-01-01          1   BEVERAGES    0.0            0\n",
       "4   4  2013-01-01          1       BOOKS    0.0            0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_train.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b62b3efe",
   "metadata": {
    "papermill": {
     "duration": 0.018221,
     "end_time": "2024-05-01T02:04:38.585429",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.567208",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> Here are the columns of df_train:\n",
    ">\n",
    "> * id – the index of the row\n",
    "> * date – the current date\n",
    "> * store_nbr – the store\n",
    "> * family – the product family\n",
    "> * sales – number of sales in this family\n",
    "> * onpromotion – the number of products on promotion in this family"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76228952",
   "metadata": {
    "papermill": {
     "duration": 0.017738,
     "end_time": "2024-05-01T02:04:38.621991",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.604253",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**holidays_events.csv**\n",
    "\n",
    "It might not be directly related to the stores, however it affects sales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "95ccb8a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:38.722632Z",
     "iopub.status.busy": "2024-05-01T02:04:38.722186Z",
     "iopub.status.idle": "2024-05-01T02:04:38.735274Z",
     "shell.execute_reply": "2024-05-01T02:04:38.734246Z"
    },
    "papermill": {
     "duration": 0.094849,
     "end_time": "2024-05-01T02:04:38.737322",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.642473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>type</th>\n",
       "      <th>locale</th>\n",
       "      <th>locale_name</th>\n",
       "      <th>description</th>\n",
       "      <th>transferred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-03-02</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>Local</td>\n",
       "      <td>Manta</td>\n",
       "      <td>Fundacion de Manta</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-04-01</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>Regional</td>\n",
       "      <td>Cotopaxi</td>\n",
       "      <td>Provincializacion de Cotopaxi</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-04-12</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>Local</td>\n",
       "      <td>Cuenca</td>\n",
       "      <td>Fundacion de Cuenca</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-04-14</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>Local</td>\n",
       "      <td>Libertad</td>\n",
       "      <td>Cantonizacion de Libertad</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-04-21</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>Local</td>\n",
       "      <td>Riobamba</td>\n",
       "      <td>Cantonizacion de Riobamba</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date     type    locale locale_name                    description  \\\n",
       "0  2012-03-02  Holiday     Local       Manta             Fundacion de Manta   \n",
       "1  2012-04-01  Holiday  Regional    Cotopaxi  Provincializacion de Cotopaxi   \n",
       "2  2012-04-12  Holiday     Local      Cuenca            Fundacion de Cuenca   \n",
       "3  2012-04-14  Holiday     Local    Libertad      Cantonizacion de Libertad   \n",
       "4  2012-04-21  Holiday     Local    Riobamba      Cantonizacion de Riobamba   \n",
       "\n",
       "   transferred  \n",
       "0        False  \n",
       "1        False  \n",
       "2        False  \n",
       "3        False  \n",
       "4        False  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_holidays_events.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0108d2d4",
   "metadata": {
    "papermill": {
     "duration": 0.017797,
     "end_time": "2024-05-01T02:04:38.773384",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.755587",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> Here are the columns in the holiday_events dataframe:\n",
    "> \n",
    "> * date – the date of the holiday\n",
    "> * type – the type of holiday (Holiday, Event, Transfer (see transferred column), Additional, Bridge, Work Day)\n",
    "> * locale – the scope of the event (Local, Regional, National)\n",
    "> * locale_name – the city where the event takes place\n",
    "> * description – name of the event\n",
    "> * transferred – whether the event has been transferred (moved to another day) or not"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27ed3da9",
   "metadata": {
    "papermill": {
     "duration": 0.017812,
     "end_time": "2024-05-01T02:04:38.809210",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.791398",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**oil.csv**\n",
    "\n",
    "Daily oil price from January 01, 2013 to August 31, 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "503b6b60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:38.847469Z",
     "iopub.status.busy": "2024-05-01T02:04:38.847071Z",
     "iopub.status.idle": "2024-05-01T02:04:38.856369Z",
     "shell.execute_reply": "2024-05-01T02:04:38.855600Z"
    },
    "papermill": {
     "duration": 0.03091,
     "end_time": "2024-05-01T02:04:38.858331",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.827421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>dcoilwtico</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>93.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>92.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>93.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-01-07</td>\n",
       "      <td>93.20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  dcoilwtico\n",
       "0  2013-01-01         NaN\n",
       "1  2013-01-02       93.14\n",
       "2  2013-01-03       92.97\n",
       "3  2013-01-04       93.12\n",
       "4  2013-01-07       93.20"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_oil.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7c724ea",
   "metadata": {
    "papermill": {
     "duration": 0.018792,
     "end_time": "2024-05-01T02:04:38.895905",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.877113",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**stores.csv**\n",
    "\n",
    "Information about the 54 stores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d2fdd26b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:38.934855Z",
     "iopub.status.busy": "2024-05-01T02:04:38.934029Z",
     "iopub.status.idle": "2024-05-01T02:04:38.945619Z",
     "shell.execute_reply": "2024-05-01T02:04:38.944507Z"
    },
    "papermill": {
     "duration": 0.034028,
     "end_time": "2024-05-01T02:04:38.948271",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.914243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>store_nbr</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>type</th>\n",
       "      <th>cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Santo Domingo</td>\n",
       "      <td>Santo Domingo de los Tsachilas</td>\n",
       "      <td>D</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   store_nbr           city                           state type  cluster\n",
       "0          1          Quito                       Pichincha    D       13\n",
       "1          2          Quito                       Pichincha    D       13\n",
       "2          3          Quito                       Pichincha    D        8\n",
       "3          4          Quito                       Pichincha    D        9\n",
       "4          5  Santo Domingo  Santo Domingo de los Tsachilas    D        4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_stores.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2ddf31d",
   "metadata": {
    "papermill": {
     "duration": 0.018335,
     "end_time": "2024-05-01T02:04:38.985654",
     "exception": false,
     "start_time": "2024-05-01T02:04:38.967319",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> Here are the columns in the stores dataframe:\n",
    "> \n",
    "> * store_nbr – the store\n",
    "> * city – the city where the store is located\n",
    "> * state – the state where the store is located\n",
    "> * type – the type of the store\n",
    "> * cluster – the number of similar stores in the vicinity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ec55678",
   "metadata": {
    "papermill": {
     "duration": 0.01809,
     "end_time": "2024-05-01T02:04:39.022213",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.004123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**transactions.csv**\n",
    "\n",
    "The number of daily transactions by store."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d4cc98a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:39.062171Z",
     "iopub.status.busy": "2024-05-01T02:04:39.061789Z",
     "iopub.status.idle": "2024-05-01T02:04:39.070859Z",
     "shell.execute_reply": "2024-05-01T02:04:39.070019Z"
    },
    "papermill": {
     "duration": 0.031983,
     "end_time": "2024-05-01T02:04:39.072831",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.040848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>store_nbr</th>\n",
       "      <th>transactions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>25</td>\n",
       "      <td>770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>1</td>\n",
       "      <td>2111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>2</td>\n",
       "      <td>2358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>3</td>\n",
       "      <td>3487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>4</td>\n",
       "      <td>1922</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  store_nbr  transactions\n",
       "0  2013-01-01         25           770\n",
       "1  2013-01-02          1          2111\n",
       "2  2013-01-02          2          2358\n",
       "3  2013-01-02          3          3487\n",
       "4  2013-01-02          4          1922"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_transactions.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f17e282",
   "metadata": {
    "papermill": {
     "duration": 0.018475,
     "end_time": "2024-05-01T02:04:39.110042",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.091567",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**test.csv**\n",
    "\n",
    "The test dataframe is identical to the train dataframe but it misses the sales column which we have to predict. The file starts on August 16, 2017 and ends on August 31, 2017. We also have the sample_submission.csv to fill in with the number of sales per day and per family:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c5d9da03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:39.149550Z",
     "iopub.status.busy": "2024-05-01T02:04:39.148448Z",
     "iopub.status.idle": "2024-05-01T02:04:39.165334Z",
     "shell.execute_reply": "2024-05-01T02:04:39.164157Z"
    },
    "papermill": {
     "duration": 0.038927,
     "end_time": "2024-05-01T02:04:39.167494",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.128567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>store_nbr</th>\n",
       "      <th>family</th>\n",
       "      <th>onpromotion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3000888</td>\n",
       "      <td>2017-08-16</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3000889</td>\n",
       "      <td>2017-08-16</td>\n",
       "      <td>1</td>\n",
       "      <td>BABY CARE</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3000890</td>\n",
       "      <td>2017-08-16</td>\n",
       "      <td>1</td>\n",
       "      <td>BEAUTY</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3000891</td>\n",
       "      <td>2017-08-16</td>\n",
       "      <td>1</td>\n",
       "      <td>BEVERAGES</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3000892</td>\n",
       "      <td>2017-08-16</td>\n",
       "      <td>1</td>\n",
       "      <td>BOOKS</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id        date  store_nbr      family  onpromotion\n",
       "0  3000888  2017-08-16          1  AUTOMOTIVE            0\n",
       "1  3000889  2017-08-16          1   BABY CARE            0\n",
       "2  3000890  2017-08-16          1      BEAUTY            2\n",
       "3  3000891  2017-08-16          1   BEVERAGES           20\n",
       "4  3000892  2017-08-16          1       BOOKS            0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3000888</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3000889</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3000890</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3000891</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3000892</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  sales\n",
       "0  3000888    0.0\n",
       "1  3000889    0.0\n",
       "2  3000890    0.0\n",
       "3  3000891    0.0\n",
       "4  3000892    0.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_test.head(5))\n",
    "display(df_sample_submission.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7befcf95",
   "metadata": {
    "papermill": {
     "duration": 0.021696,
     "end_time": "2024-05-01T02:04:39.208254",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.186558",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> Here are the columns of df_test:\n",
    ">\n",
    "> * id – the index of the row\n",
    "> * date – the current date\n",
    "> * store_nbr – the store\n",
    "> * family – the product family\n",
    "> * onpromotion – the number of products on promotion in this family"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "466b043c",
   "metadata": {
    "papermill": {
     "duration": 0.02096,
     "end_time": "2024-05-01T02:04:39.249172",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.228212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "938f20bc",
   "metadata": {
    "papermill": {
     "duration": 0.019085,
     "end_time": "2024-05-01T02:04:39.288507",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.269422",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In order to make things simpler for my models I created some covariances from the original data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5b477de0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:39.328385Z",
     "iopub.status.busy": "2024-05-01T02:04:39.328000Z",
     "iopub.status.idle": "2024-05-01T02:04:39.518792Z",
     "shell.execute_reply": "2024-05-01T02:04:39.518006Z"
    },
    "papermill": {
     "duration": 0.212775,
     "end_time": "2024-05-01T02:04:39.520641",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.307866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['AUTOMOTIVE', 'BABY CARE', 'BEAUTY', 'BEVERAGES', 'BOOKS',\n",
       "       'BREAD/BAKERY', 'CELEBRATION', 'CLEANING', 'DAIRY', 'DELI', 'EGGS',\n",
       "       'FROZEN FOODS', 'GROCERY I', 'GROCERY II', 'HARDWARE',\n",
       "       'HOME AND KITCHEN I', 'HOME AND KITCHEN II', 'HOME APPLIANCES',\n",
       "       'HOME CARE', 'LADIESWEAR', 'LAWN AND GARDEN', 'LINGERIE',\n",
       "       'LIQUOR,WINE,BEER', 'MAGAZINES', 'MEATS', 'PERSONAL CARE',\n",
       "       'PET SUPPLIES', 'PLAYERS AND ELECTRONICS', 'POULTRY',\n",
       "       'PREPARED FOODS', 'PRODUCE', 'SCHOOL AND OFFICE SUPPLIES',\n",
       "       'SEAFOOD'], dtype=object)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n",
       "       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n",
       "       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n",
       "       52, 53, 54])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "family_list = df_train['family'].unique()\n",
    "store_list = df_stores['store_nbr'].unique()\n",
    "display(family_list)\n",
    "display(store_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5b80476",
   "metadata": {
    "papermill": {
     "duration": 0.019009,
     "end_time": "2024-05-01T02:04:39.559681",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.540672",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Prepare Data Frames, merging train and stores and then sorting it by store number, product family and date. This will give easier access to the models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8f8af7f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:39.601049Z",
     "iopub.status.busy": "2024-05-01T02:04:39.599978Z",
     "iopub.status.idle": "2024-05-01T02:04:43.635998Z",
     "shell.execute_reply": "2024-05-01T02:04:43.634859Z"
    },
    "papermill": {
     "duration": 4.059521,
     "end_time": "2024-05-01T02:04:43.638570",
     "exception": false,
     "start_time": "2024-05-01T02:04:39.579049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>store_nbr</th>\n",
       "      <th>family</th>\n",
       "      <th>sales</th>\n",
       "      <th>onpromotion</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>type</th>\n",
       "      <th>cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1782</th>\n",
       "      <td>1782</td>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3564</th>\n",
       "      <td>3564</td>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5346</th>\n",
       "      <td>5346</td>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7128</th>\n",
       "      <td>7128</td>\n",
       "      <td>2013-01-05</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Quito</td>\n",
       "      <td>Pichincha</td>\n",
       "      <td>D</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id        date store_nbr      family  sales  onpromotion   city  \\\n",
       "0        0  2013-01-01         1  AUTOMOTIVE    0.0            0  Quito   \n",
       "1782  1782  2013-01-02         1  AUTOMOTIVE    2.0            0  Quito   \n",
       "3564  3564  2013-01-03         1  AUTOMOTIVE    3.0            0  Quito   \n",
       "5346  5346  2013-01-04         1  AUTOMOTIVE    3.0            0  Quito   \n",
       "7128  7128  2013-01-05         1  AUTOMOTIVE    5.0            0  Quito   \n",
       "\n",
       "          state type cluster  \n",
       "0     Pichincha    D      13  \n",
       "1782  Pichincha    D      13  \n",
       "3564  Pichincha    D      13  \n",
       "5346  Pichincha    D      13  \n",
       "7128  Pichincha    D      13  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_merged = pd.merge(df_train, df_stores, on = 'store_nbr')\n",
    "train_merged = train_merged.sort_values(['store_nbr', 'family', 'date'])\n",
    "train_merged = train_merged.astype({\"store_nbr\":'str', \"family\":'str', \"city\":'str',\n",
    "                          \"state\":'str', \"type\":'str', \"cluster\":'str'})\n",
    "display(train_merged.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23652290",
   "metadata": {
    "papermill": {
     "duration": 0.019732,
     "end_time": "2024-05-01T02:04:43.679206",
     "exception": false,
     "start_time": "2024-05-01T02:04:43.659474",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Same thing for the test DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "60b35a5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:43.722935Z",
     "iopub.status.busy": "2024-05-01T02:04:43.722499Z",
     "iopub.status.idle": "2024-05-01T02:04:43.740160Z",
     "shell.execute_reply": "2024-05-01T02:04:43.739129Z"
    },
    "papermill": {
     "duration": 0.042589,
     "end_time": "2024-05-01T02:04:43.742287",
     "exception": false,
     "start_time": "2024-05-01T02:04:43.699698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>store_nbr</th>\n",
       "      <th>family</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3000888</td>\n",
       "      <td>2017-08-16</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1782</th>\n",
       "      <td>3002670</td>\n",
       "      <td>2017-08-17</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3564</th>\n",
       "      <td>3004452</td>\n",
       "      <td>2017-08-18</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5346</th>\n",
       "      <td>3006234</td>\n",
       "      <td>2017-08-19</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7128</th>\n",
       "      <td>3008016</td>\n",
       "      <td>2017-08-20</td>\n",
       "      <td>1</td>\n",
       "      <td>AUTOMOTIVE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           id        date  store_nbr      family\n",
       "0     3000888  2017-08-16          1  AUTOMOTIVE\n",
       "1782  3002670  2017-08-17          1  AUTOMOTIVE\n",
       "3564  3004452  2017-08-18          1  AUTOMOTIVE\n",
       "5346  3006234  2017-08-19          1  AUTOMOTIVE\n",
       "7128  3008016  2017-08-20          1  AUTOMOTIVE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_test_dropped = df_test.drop(['onpromotion'], axis=1)\n",
    "df_test_sorted = df_test_dropped.sort_values(by=['store_nbr','family'])\n",
    "\n",
    "display(df_test_sorted.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93d790fe",
   "metadata": {
    "papermill": {
     "duration": 0.021326,
     "end_time": "2024-05-01T02:04:43.784420",
     "exception": false,
     "start_time": "2024-05-01T02:04:43.763094",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Strategy**\n",
    "\n",
    "I could use a global model applied on the 1782 (33 x 52) time series. I could also use a model for each time series. Both models have disadvantages though with the first being too general and the second too specific. For this reason we will try to approach the problem with an in between strategy fitting a model for each product family, so 33 models trained on 54 time series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b35dc87a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:43.827995Z",
     "iopub.status.busy": "2024-05-01T02:04:43.827613Z",
     "iopub.status.idle": "2024-05-01T02:04:44.939793Z",
     "shell.execute_reply": "2024-05-01T02:04:44.938462Z"
    },
    "papermill": {
     "duration": 1.137416,
     "end_time": "2024-05-01T02:04:44.943020",
     "exception": false,
     "start_time": "2024-05-01T02:04:43.805604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import darts\n",
    "from darts import TimeSeries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f0b35792",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:04:44.987467Z",
     "iopub.status.busy": "2024-05-01T02:04:44.987043Z",
     "iopub.status.idle": "2024-05-01T02:05:15.633777Z",
     "shell.execute_reply": "2024-05-01T02:05:15.632324Z"
    },
    "papermill": {
     "duration": 30.672183,
     "end_time": "2024-05-01T02:05:15.636847",
     "exception": false,
     "start_time": "2024-05-01T02:04:44.964664",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Creating subsets per family in a dictionary\n",
    "family_dict = {}\n",
    "for family in family_list:\n",
    "    df_family = train_merged.loc[train_merged['family'] == family]\n",
    "    TS_family_list = TimeSeries.from_group_dataframe(\n",
    "                                df_family,\n",
    "                                time_col = 'date',\n",
    "                                group_cols = ['store_nbr', 'family'],\n",
    "                                static_cols = ['city', 'state', 'type', 'cluster'],\n",
    "                                value_cols = 'sales',\n",
    "                                fill_missing_dates = True, ##fill missing dates\n",
    "                                freq = 'D')  ##interval days\n",
    "    for ts in TS_family_list:\n",
    "        ts = ts.astype(np.float32)\n",
    "    \n",
    "    ##Sorting by store number\n",
    "    TS_family_list = sorted(TS_family_list, key = lambda ts: int(ts.static_covariates_values()[0][0]))\n",
    "    family_dict[family] = TS_family_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a14eca25",
   "metadata": {
    "papermill": {
     "duration": 0.020412,
     "end_time": "2024-05-01T02:05:15.678511",
     "exception": false,
     "start_time": "2024-05-01T02:05:15.658099",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This how the first timeseries looks like for one of the product families."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d62d3881",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:05:15.722914Z",
     "iopub.status.busy": "2024-05-01T02:05:15.721266Z",
     "iopub.status.idle": "2024-05-01T02:05:15.753289Z",
     "shell.execute_reply": "2024-05-01T02:05:15.752437Z"
    },
    "papermill": {
     "duration": 0.05642,
     "end_time": "2024-05-01T02:05:15.755548",
     "exception": false,
     "start_time": "2024-05-01T02:05:15.699128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;TimeSeries (DataArray) (date: 1688, component: 1, sample: 1)&gt; Size: 14kB\n",
       "array([[[0.]],\n",
       "\n",
       "       [[2.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[1.]],\n",
       "\n",
       "       [[6.]],\n",
       "\n",
       "       [[4.]]])\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 14kB 2013-01-01 2013-01-02 ... 2017-08-15\n",
       "  * component  (component) object 8B &#x27;sales&#x27;\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  static_covariates store_nbr  family   city      state...\n",
       "    hierarchy:          None</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>TimeSeries (DataArray)</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>date</span>: 1688</li><li><span class='xr-has-index'>component</span>: 1</li><li><span>sample</span>: 1</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-7d7c31cb-d01f-4225-9556-eb6e7f27d841' class='xr-array-in' type='checkbox' checked><label for='section-7d7c31cb-d01f-4225-9556-eb6e7f27d841' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.0 2.0 0.0 3.0 3.0 0.0 1.0 3.0 ... 2.0 4.0 10.0 1.0 3.0 1.0 6.0 4.0</span></div><div class='xr-array-data'><pre>array([[[0.]],\n",
       "\n",
       "       [[2.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[1.]],\n",
       "\n",
       "       [[6.]],\n",
       "\n",
       "       [[4.]]])</pre></div></div></li><li class='xr-section-item'><input id='section-2d6e9779-0d9f-42ee-bf98-488705f08c6f' class='xr-section-summary-in' type='checkbox'  checked><label for='section-2d6e9779-0d9f-42ee-bf98-488705f08c6f' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>date</span></div><div class='xr-var-dims'>(date)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2013-01-01 ... 2017-08-15</div><input id='attrs-95b4f5f7-48e0-4955-a24b-44692f05ee0a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-95b4f5f7-48e0-4955-a24b-44692f05ee0a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-cd0a11e0-0714-4e27-bc2c-0e587e8bcc9f' class='xr-var-data-in' type='checkbox'><label for='data-cd0a11e0-0714-4e27-bc2c-0e587e8bcc9f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2013-01-01T00:00:00.000000000&#x27;, &#x27;2013-01-02T00:00:00.000000000&#x27;,\n",
       "       &#x27;2013-01-03T00:00:00.000000000&#x27;, ..., &#x27;2017-08-13T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-14T00:00:00.000000000&#x27;, &#x27;2017-08-15T00:00:00.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>&#x27;sales&#x27;</div><input id='attrs-e4dbf29e-68b7-4378-802d-58eeac6f1808' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e4dbf29e-68b7-4378-802d-58eeac6f1808' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-fefe4c86-6d0e-463f-a2ff-f54610a7c562' class='xr-var-data-in' type='checkbox'><label for='data-fefe4c86-6d0e-463f-a2ff-f54610a7c562' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;sales&#x27;], dtype=object)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-06432465-ed36-4d5a-a2a7-4c3ca0061879' class='xr-section-summary-in' type='checkbox'  ><label for='section-06432465-ed36-4d5a-a2a7-4c3ca0061879' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>date</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-4c598c7d-09d3-4944-9ee3-23d4c1bb7263' class='xr-index-data-in' type='checkbox'/><label for='index-4c598c7d-09d3-4944-9ee3-23d4c1bb7263' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,\n",
       "               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;, &#x27;2013-01-07&#x27;, &#x27;2013-01-08&#x27;,\n",
       "               &#x27;2013-01-09&#x27;, &#x27;2013-01-10&#x27;,\n",
       "               ...\n",
       "               &#x27;2017-08-06&#x27;, &#x27;2017-08-07&#x27;, &#x27;2017-08-08&#x27;, &#x27;2017-08-09&#x27;,\n",
       "               &#x27;2017-08-10&#x27;, &#x27;2017-08-11&#x27;, &#x27;2017-08-12&#x27;, &#x27;2017-08-13&#x27;,\n",
       "               &#x27;2017-08-14&#x27;, &#x27;2017-08-15&#x27;],\n",
       "              dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;date&#x27;, length=1688, freq=&#x27;D&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-f2189412-64c6-4390-878c-a73d4ea5974e' class='xr-index-data-in' type='checkbox'/><label for='index-f2189412-64c6-4390-878c-a73d4ea5974e' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;sales&#x27;], dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-9d79e1d2-c5e8-441d-b0b2-e78737e2b307' class='xr-section-summary-in' type='checkbox'  checked><label for='section-9d79e1d2-c5e8-441d-b0b2-e78737e2b307' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>static_covariates :</span></dt><dd>static_covariates store_nbr  family   city      state type cluster\n",
       "component                                                         \n",
       "sales                     1  BEAUTY  Quito  Pichincha    D      13</dd><dt><span>hierarchy :</span></dt><dd>None</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<TimeSeries (DataArray) (date: 1688, component: 1, sample: 1)> Size: 14kB\n",
       "array([[[0.]],\n",
       "\n",
       "       [[2.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[1.]],\n",
       "\n",
       "       [[6.]],\n",
       "\n",
       "       [[4.]]])\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 14kB 2013-01-01 2013-01-02 ... 2017-08-15\n",
       "  * component  (component) object 8B 'sales'\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  static_covariates store_nbr  family   city      state...\n",
       "    hierarchy:          None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(family_dict['BEAUTY'][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f6ef0bb",
   "metadata": {
    "papermill": {
     "duration": 0.021208,
     "end_time": "2024-05-01T02:05:15.798507",
     "exception": false,
     "start_time": "2024-05-01T02:05:15.777299",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We retrieve all the values indicated above: the number of sales, the date of each sale in Coordinates > date, and the dependent covariates in Attributes > static_covariates."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ee6b51e",
   "metadata": {
    "papermill": {
     "duration": 0.021162,
     "end_time": "2024-05-01T02:05:15.841385",
     "exception": false,
     "start_time": "2024-05-01T02:05:15.820223",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Normalizing Data**\n",
    "\n",
    "Before fitting our models on the timeseries it's a good practice to normalize them. It will enhance the models' performance. For this we'll use some of the built in functions of the DARTS library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "20e6801e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:05:15.887097Z",
     "iopub.status.busy": "2024-05-01T02:05:15.886152Z",
     "iopub.status.idle": "2024-05-01T02:05:16.295006Z",
     "shell.execute_reply": "2024-05-01T02:05:16.293811Z"
    },
    "papermill": {
     "duration": 0.435073,
     "end_time": "2024-05-01T02:05:16.298178",
     "exception": false,
     "start_time": "2024-05-01T02:05:15.863105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from darts.dataprocessing import Pipeline\n",
    "from darts.dataprocessing.transformers import Scaler, StaticCovariatesTransformer, MissingValuesFiller, InvertibleMapper\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "41835c0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:05:16.343373Z",
     "iopub.status.busy": "2024-05-01T02:05:16.342872Z",
     "iopub.status.idle": "2024-05-01T02:05:50.911214Z",
     "shell.execute_reply": "2024-05-01T02:05:50.910064Z"
    },
    "papermill": {
     "duration": 34.593876,
     "end_time": "2024-05-01T02:05:50.913844",
     "exception": false,
     "start_time": "2024-05-01T02:05:16.319968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "family_pipeline_dict = {}\n",
    "family_transformed_dict = {}\n",
    "##For each product family\n",
    "for key in family_dict:\n",
    "    ##Filling missing values\n",
    "    train_filler = MissingValuesFiller(verbose = False, n_jobs = -1, name = 'Fill NaNs')\n",
    "    ##One hot encoder for static covariates\n",
    "    static_cov_transformer = StaticCovariatesTransformer(verbose = False, transformer_cat = sklearn.preprocessing.OneHotEncoder(), name = 'Encoder')\n",
    "    ##Applying log transformation\n",
    "    log_transformer = InvertibleMapper(np.log1p, np.expm1, verbose=False, n_jobs=-1, name=\"Log-Transform\") \n",
    "    ##Scaling time series\n",
    "    train_scaler = Scaler(verbose = False, n_jobs = -1, name = 'Scale')\n",
    "    ##Pipeline the above transformers\n",
    "    train_pipeline = Pipeline([train_filler,\n",
    "                             static_cov_transformer,\n",
    "                             log_transformer,\n",
    "                             train_scaler])\n",
    "    train_transformed = train_pipeline.fit_transform(family_dict[key])\n",
    "    \n",
    "    ##Store pipeline and transformed time series for each product family\n",
    "    family_pipeline_dict[key] = train_pipeline\n",
    "    family_transformed_dict[key] = train_transformed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bd26887",
   "metadata": {
    "papermill": {
     "duration": 0.0204,
     "end_time": "2024-05-01T02:05:50.955254",
     "exception": false,
     "start_time": "2024-05-01T02:05:50.934854",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Congragulations! We now have our main time series ready, normalized and one hot encoded."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41ea52ce",
   "metadata": {
    "papermill": {
     "duration": 0.020324,
     "end_time": "2024-05-01T02:05:50.996262",
     "exception": false,
     "start_time": "2024-05-01T02:05:50.975938",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Extra covariates (time series features)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a32ea22a",
   "metadata": {
    "papermill": {
     "duration": 0.020166,
     "end_time": "2024-05-01T02:05:51.037158",
     "exception": false,
     "start_time": "2024-05-01T02:05:51.016992",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Date**\n",
    "\n",
    "I want to squeeze as much information as possible from the date. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "582889d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:05:51.080206Z",
     "iopub.status.busy": "2024-05-01T02:05:51.079809Z",
     "iopub.status.idle": "2024-05-01T02:05:51.140237Z",
     "shell.execute_reply": "2024-05-01T02:05:51.139210Z"
    },
    "papermill": {
     "duration": 0.084929,
     "end_time": "2024-05-01T02:05:51.142691",
     "exception": false,
     "start_time": "2024-05-01T02:05:51.057762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from darts.utils.timeseries_generation import datetime_attribute_timeseries\n",
    "\n",
    "##Duration of dataset\n",
    "full_time_period = pd.date_range(start='2013-01-01', end='2017-08-31', freq='D')\n",
    "\n",
    "\n",
    "year = datetime_attribute_timeseries(time_index = full_time_period, attribute=\"year\")\n",
    "month = datetime_attribute_timeseries(time_index = full_time_period, attribute=\"month\")\n",
    "day = datetime_attribute_timeseries(time_index = full_time_period, attribute=\"day\")\n",
    "dayofyear = datetime_attribute_timeseries(time_index = full_time_period, attribute=\"dayofyear\")\n",
    "weekday = datetime_attribute_timeseries(time_index = full_time_period, attribute=\"dayofweek\")\n",
    "weekofyear = datetime_attribute_timeseries(time_index = full_time_period, attribute=\"weekofyear\")\n",
    "timesteps = TimeSeries.from_times_and_values(times=full_time_period,\n",
    "                                             values=np.arange(len(full_time_period)),\n",
    "                                             columns=[\"linear_increase\"])\n",
    "\n",
    "time_cov = year.stack(month).stack(day).stack(dayofyear).stack(weekday).stack(weekofyear).stack(timesteps)\n",
    "time_cov = time_cov.astype(np.float32)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77fae64d",
   "metadata": {
    "papermill": {
     "duration": 0.020301,
     "end_time": "2024-05-01T02:05:51.183785",
     "exception": false,
     "start_time": "2024-05-01T02:05:51.163484",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Example of how our time covariant looks like."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "258d6427",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:05:51.226725Z",
     "iopub.status.busy": "2024-05-01T02:05:51.226007Z",
     "iopub.status.idle": "2024-05-01T02:05:51.248686Z",
     "shell.execute_reply": "2024-05-01T02:05:51.247519Z"
    },
    "papermill": {
     "duration": 0.047339,
     "end_time": "2024-05-01T02:05:51.251585",
     "exception": false,
     "start_time": "2024-05-01T02:05:51.204246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['year' 'month' 'day' 'dayofyear' 'dayofweek' 'weekofyear'\n",
      " 'linear_increase']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/darts/timeseries.py:4751: FutureWarning: DatetimeIndex.is_integer is deprecated. Use pandas.api.types.is_integer_dtype instead.\n",
      "  if time_idx.is_integer() and not isinstance(time_idx, pd.RangeIndex):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;TimeSeries (DataArray) (time: 1, component: 7, sample: 1)&gt; Size: 28B\n",
       "array([[[2013.],\n",
       "        [   4.],\n",
       "        [  11.],\n",
       "        [ 101.],\n",
       "        [   3.],\n",
       "        [  15.],\n",
       "        [ 100.]]], dtype=float32)\n",
       "Coordinates:\n",
       "  * time       (time) datetime64[ns] 8B 2013-04-11\n",
       "  * component  (component) object 56B &#x27;year&#x27; &#x27;month&#x27; ... &#x27;linear_increase&#x27;\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  None\n",
       "    hierarchy:          None</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>TimeSeries (DataArray)</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 1</li><li><span class='xr-has-index'>component</span>: 7</li><li><span>sample</span>: 1</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-abdd2579-56ee-4dfe-b8cc-312e5ef3ec7a' class='xr-array-in' type='checkbox' checked><label for='section-abdd2579-56ee-4dfe-b8cc-312e5ef3ec7a' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>2.013e+03 4.0 11.0 101.0 3.0 15.0 100.0</span></div><div class='xr-array-data'><pre>array([[[2013.],\n",
       "        [   4.],\n",
       "        [  11.],\n",
       "        [ 101.],\n",
       "        [   3.],\n",
       "        [  15.],\n",
       "        [ 100.]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-5f4ef586-17d6-4089-9931-3325930bbcef' class='xr-section-summary-in' type='checkbox'  checked><label for='section-5f4ef586-17d6-4089-9931-3325930bbcef' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2013-04-11</div><input id='attrs-db9bab77-80f2-40c5-8742-c8cf0d9dfd1b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-db9bab77-80f2-40c5-8742-c8cf0d9dfd1b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-1f78f909-d9f1-4b9f-98cc-90ab56adc920' class='xr-var-data-in' type='checkbox'><label for='data-1f78f909-d9f1-4b9f-98cc-90ab56adc920' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2013-04-11T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>&#x27;year&#x27; ... &#x27;linear_increase&#x27;</div><input id='attrs-f0015c5f-194d-49e3-93c0-7bb708052c69' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-f0015c5f-194d-49e3-93c0-7bb708052c69' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e27e70ed-4577-4ba9-a208-efda9bced89a' class='xr-var-data-in' type='checkbox'><label for='data-e27e70ed-4577-4ba9-a208-efda9bced89a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;year&#x27;, &#x27;month&#x27;, &#x27;day&#x27;, &#x27;dayofyear&#x27;, &#x27;dayofweek&#x27;, &#x27;weekofyear&#x27;,\n",
       "       &#x27;linear_increase&#x27;], dtype=object)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-216d8ee1-934f-4965-ab5c-d5c5063d2ef6' class='xr-section-summary-in' type='checkbox'  ><label for='section-216d8ee1-934f-4965-ab5c-d5c5063d2ef6' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-49aa32de-d012-4019-a039-ea4283f41e30' class='xr-index-data-in' type='checkbox'/><label for='index-49aa32de-d012-4019-a039-ea4283f41e30' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2013-04-11&#x27;], dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, freq=&#x27;D&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-58da4b52-5994-4c19-a001-d9985aaf5afb' class='xr-index-data-in' type='checkbox'/><label for='index-58da4b52-5994-4c19-a001-d9985aaf5afb' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;year&#x27;, &#x27;month&#x27;, &#x27;day&#x27;, &#x27;dayofyear&#x27;, &#x27;dayofweek&#x27;, &#x27;weekofyear&#x27;,\n",
       "       &#x27;linear_increase&#x27;],\n",
       "      dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-58deb403-c68d-42ac-bc59-4643270d0e95' class='xr-section-summary-in' type='checkbox'  checked><label for='section-58deb403-c68d-42ac-bc59-4643270d0e95' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>static_covariates :</span></dt><dd>None</dd><dt><span>hierarchy :</span></dt><dd>None</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<TimeSeries (DataArray) (time: 1, component: 7, sample: 1)> Size: 28B\n",
       "array([[[2013.],\n",
       "        [   4.],\n",
       "        [  11.],\n",
       "        [ 101.],\n",
       "        [   3.],\n",
       "        [  15.],\n",
       "        [ 100.]]], dtype=float32)\n",
       "Coordinates:\n",
       "  * time       (time) datetime64[ns] 8B 2013-04-11\n",
       "  * component  (component) object 56B 'year' 'month' ... 'linear_increase'\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  None\n",
       "    hierarchy:          None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(print(time_cov.components.values))\n",
    "display(time_cov[100])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4dcc6ff",
   "metadata": {
    "papermill": {
     "duration": 0.023156,
     "end_time": "2024-05-01T02:05:51.296555",
     "exception": false,
     "start_time": "2024-05-01T02:05:51.273399",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, I need to normalize this covariant as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "265933b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:05:51.342171Z",
     "iopub.status.busy": "2024-05-01T02:05:51.341808Z",
     "iopub.status.idle": "2024-05-01T02:05:51.377225Z",
     "shell.execute_reply": "2024-05-01T02:05:51.376027Z"
    },
    "papermill": {
     "duration": 0.06107,
     "end_time": "2024-05-01T02:05:51.379855",
     "exception": false,
     "start_time": "2024-05-01T02:05:51.318785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "time_cov_scaler = Scaler(verbose=False, n_jobs=-1, name=\"Scaler\")\n",
    "##Split before that dates to be predicted\n",
    "time_cov_train, time_cov_val = time_cov.split_before(pd.Timestamp('20170816'))\n",
    "time_cov_scaler.fit(time_cov_train)\n",
    "time_cov_transformed = time_cov_scaler.transform(time_cov)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e6b879e",
   "metadata": {
    "papermill": {
     "duration": 0.021505,
     "end_time": "2024-05-01T02:05:51.424207",
     "exception": false,
     "start_time": "2024-05-01T02:05:51.402702",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Oil**\n",
    "\n",
    "I know the oil prices in advance (future covariate). To help the models we will extract the moving average of the oil prices so we can highlight potential trends."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3fb58322",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:05:51.470133Z",
     "iopub.status.busy": "2024-05-01T02:05:51.469723Z",
     "iopub.status.idle": "2024-05-01T02:06:05.689013Z",
     "shell.execute_reply": "2024-05-01T02:06:05.687609Z"
    },
    "papermill": {
     "duration": 14.245962,
     "end_time": "2024-05-01T02:06:05.691984",
     "exception": false,
     "start_time": "2024-05-01T02:05:51.446022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from darts.models import MovingAverage\n",
    "# Oil Price\n",
    "\n",
    "oil = TimeSeries.from_dataframe(df_oil, \n",
    "                                time_col = 'date', \n",
    "                                value_cols = ['dcoilwtico'],\n",
    "                                freq = 'D')\n",
    "\n",
    "oil = oil.astype(np.float32)\n",
    "\n",
    "# Transform\n",
    "oil_filler = MissingValuesFiller(verbose=False, n_jobs=-1, name=\"Filler\")\n",
    "oil_scaler = Scaler(verbose=False, n_jobs=-1, name=\"Scaler\")\n",
    "oil_pipeline = Pipeline([oil_filler, oil_scaler])\n",
    "oil_transformed = oil_pipeline.fit_transform(oil)\n",
    "\n",
    "# Moving Averages for Oil Price of 7 and 28 days\n",
    "oil_moving_average_7 = MovingAverage(window=7)\n",
    "oil_moving_average_28 = MovingAverage(window=28)\n",
    "\n",
    "oil_moving_averages = []\n",
    "\n",
    "ma_7 = oil_moving_average_7.filter(oil_transformed).astype(np.float32)\n",
    "ma_7 = ma_7.with_columns_renamed(col_names=ma_7.components, col_names_new=\"oil_ma_7\")\n",
    "ma_28 = oil_moving_average_28.filter(oil_transformed).astype(np.float32)\n",
    "ma_28 = ma_28.with_columns_renamed(col_names=ma_28.components, col_names_new=\"oil_ma_28\")\n",
    "oil_moving_averages = ma_7.stack(ma_28)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1eea66e2",
   "metadata": {
    "papermill": {
     "duration": 0.022069,
     "end_time": "2024-05-01T02:06:05.736835",
     "exception": false,
     "start_time": "2024-05-01T02:06:05.714766",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is what it looks like for index 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8beaa0bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:05.784775Z",
     "iopub.status.busy": "2024-05-01T02:06:05.783990Z",
     "iopub.status.idle": "2024-05-01T02:06:05.801491Z",
     "shell.execute_reply": "2024-05-01T02:06:05.799791Z"
    },
    "papermill": {
     "duration": 0.044544,
     "end_time": "2024-05-01T02:06:05.804082",
     "exception": false,
     "start_time": "2024-05-01T02:06:05.759538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/darts/timeseries.py:4751: FutureWarning: DatetimeIndex.is_integer is deprecated. Use pandas.api.types.is_integer_dtype instead.\n",
      "  if time_idx.is_integer() and not isinstance(time_idx, pd.RangeIndex):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;TimeSeries (DataArray) (date: 1, component: 2, sample: 1)&gt; Size: 8B\n",
       "array([[[0.78416604],\n",
       "        [0.78240633]]], dtype=float32)\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 8B 2013-04-11\n",
       "  * component  (component) object 16B &#x27;oil_ma_7&#x27; &#x27;oil_ma_28&#x27;\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  None\n",
       "    hierarchy:          None</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>TimeSeries (DataArray)</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>date</span>: 1</li><li><span class='xr-has-index'>component</span>: 2</li><li><span>sample</span>: 1</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-847a1864-b0a6-468d-8003-780a97599077' class='xr-array-in' type='checkbox' checked><label for='section-847a1864-b0a6-468d-8003-780a97599077' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.7842 0.7824</span></div><div class='xr-array-data'><pre>array([[[0.78416604],\n",
       "        [0.78240633]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-b6e2218e-e147-4363-883f-fa38bf5c4aa4' class='xr-section-summary-in' type='checkbox'  checked><label for='section-b6e2218e-e147-4363-883f-fa38bf5c4aa4' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>date</span></div><div class='xr-var-dims'>(date)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2013-04-11</div><input id='attrs-0dea6038-68c3-42db-83fc-5d06ac69922a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-0dea6038-68c3-42db-83fc-5d06ac69922a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-cc498942-190c-4567-bff0-a138b1ef173a' class='xr-var-data-in' type='checkbox'><label for='data-cc498942-190c-4567-bff0-a138b1ef173a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2013-04-11T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>&#x27;oil_ma_7&#x27; &#x27;oil_ma_28&#x27;</div><input id='attrs-2c5e902d-162f-4e9e-91ed-d2412f623460' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-2c5e902d-162f-4e9e-91ed-d2412f623460' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-819ab14a-6eb4-4cdb-810d-505e202f00b6' class='xr-var-data-in' type='checkbox'><label for='data-819ab14a-6eb4-4cdb-810d-505e202f00b6' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;oil_ma_7&#x27;, &#x27;oil_ma_28&#x27;], dtype=object)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-00632a7b-7b90-4e77-9e72-1c482a5d46c1' class='xr-section-summary-in' type='checkbox'  ><label for='section-00632a7b-7b90-4e77-9e72-1c482a5d46c1' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>date</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-b388dc20-656c-44fa-8e8d-16233a6da8fa' class='xr-index-data-in' type='checkbox'/><label for='index-b388dc20-656c-44fa-8e8d-16233a6da8fa' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2013-04-11&#x27;], dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;date&#x27;, freq=&#x27;D&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-29395258-8dc8-4718-a1e3-a903a7bc5b3d' class='xr-index-data-in' type='checkbox'/><label for='index-29395258-8dc8-4718-a1e3-a903a7bc5b3d' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;oil_ma_7&#x27;, &#x27;oil_ma_28&#x27;], dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-0c7d3fdf-a5e1-4562-850d-e82ca54f301a' class='xr-section-summary-in' type='checkbox'  checked><label for='section-0c7d3fdf-a5e1-4562-850d-e82ca54f301a' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>static_covariates :</span></dt><dd>None</dd><dt><span>hierarchy :</span></dt><dd>None</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<TimeSeries (DataArray) (date: 1, component: 2, sample: 1)> Size: 8B\n",
       "array([[[0.78416604],\n",
       "        [0.78240633]]], dtype=float32)\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 8B 2013-04-11\n",
       "  * component  (component) object 16B 'oil_ma_7' 'oil_ma_28'\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  None\n",
       "    hierarchy:          None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(oil_moving_averages[100])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cf84c83",
   "metadata": {
    "papermill": {
     "duration": 0.023226,
     "end_time": "2024-05-01T02:06:05.850885",
     "exception": false,
     "start_time": "2024-05-01T02:06:05.827659",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Holidays**\n",
    "\n",
    "Ferdinand Berr in his notebook has implemented functions to detail these holidays. In particular, he adds information about whether the holiday is Christmas day, whether it is a soccer game day, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c425cb69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:05.900163Z",
     "iopub.status.busy": "2024-05-01T02:06:05.899315Z",
     "iopub.status.idle": "2024-05-01T02:06:05.909871Z",
     "shell.execute_reply": "2024-05-01T02:06:05.908504Z"
    },
    "papermill": {
     "duration": 0.038777,
     "end_time": "2024-05-01T02:06:05.912900",
     "exception": false,
     "start_time": "2024-05-01T02:06:05.874123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Specify the type of holiday\n",
    "def holiday_list(df_stores):\n",
    "\n",
    "    listofseries = []\n",
    "    \n",
    "    for i in range(0,len(df_stores)):\n",
    "            \n",
    "            df_holiday_dummies = pd.DataFrame(columns=['date'])\n",
    "            df_holiday_dummies[\"date\"] = df_holidays_events[\"date\"]\n",
    "            \n",
    "            df_holiday_dummies[\"national_holiday\"] = np.where(((df_holidays_events[\"type\"] == \"Holiday\") & (df_holidays_events[\"locale\"] == \"National\")), 1, 0)\n",
    "\n",
    "            df_holiday_dummies[\"earthquake_relief\"] = np.where(df_holidays_events['description'].str.contains('Terremoto Manabi'), 1, 0)\n",
    "\n",
    "            df_holiday_dummies[\"christmas\"] = np.where(df_holidays_events['description'].str.contains('Navidad'), 1, 0)\n",
    "\n",
    "            df_holiday_dummies[\"football_event\"] = np.where(df_holidays_events['description'].str.contains('futbol'), 1, 0)\n",
    "\n",
    "            df_holiday_dummies[\"national_event\"] = np.where(((df_holidays_events[\"type\"] == \"Event\") & (df_holidays_events[\"locale\"] == \"National\") & (~df_holidays_events['description'].str.contains('Terremoto Manabi')) & (~df_holidays_events['description'].str.contains('futbol'))), 1, 0)\n",
    "\n",
    "            df_holiday_dummies[\"work_day\"] = np.where((df_holidays_events[\"type\"] == \"Work Day\"), 1, 0)\n",
    "\n",
    "            df_holiday_dummies[\"local_holiday\"] = np.where(((df_holidays_events[\"type\"] == \"Holiday\") & ((df_holidays_events[\"locale_name\"] == df_stores['state'][i]) | (df_holidays_events[\"locale_name\"] == df_stores['city'][i]))), 1, 0)\n",
    "                     \n",
    "            listofseries.append(df_holiday_dummies)\n",
    "\n",
    "    return listofseries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d9b10923",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:05.962694Z",
     "iopub.status.busy": "2024-05-01T02:06:05.962207Z",
     "iopub.status.idle": "2024-05-01T02:06:05.969481Z",
     "shell.execute_reply": "2024-05-01T02:06:05.968577Z"
    },
    "papermill": {
     "duration": 0.034577,
     "end_time": "2024-05-01T02:06:05.971672",
     "exception": false,
     "start_time": "2024-05-01T02:06:05.937095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Remove zeros and duplicates\n",
    "def remove_0_and_duplicates(holiday_list):\n",
    "\n",
    "    listofseries = []\n",
    "    \n",
    "    for i in range(0,len(holiday_list)):\n",
    "            \n",
    "            df_holiday_per_store = list_of_holidays_per_store[i].set_index('date')\n",
    "            \n",
    "            ##Check for zeros\n",
    "            df_holiday_per_store = df_holiday_per_store.loc[~(df_holiday_per_store==0).all(axis=1)]\n",
    "            \n",
    "            ##Check for duplicates\n",
    "            df_holiday_per_store = df_holiday_per_store.groupby('date').agg({'national_holiday':'max', 'earthquake_relief':'max', \n",
    "                                   'christmas':'max', 'football_event':'max', \n",
    "                                   'national_event':'max', 'work_day':'max', \n",
    "                                   'local_holiday':'max'}).reset_index()\n",
    "\n",
    "            listofseries.append(df_holiday_per_store)\n",
    "\n",
    "    return listofseries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0b4e4327",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:06.022282Z",
     "iopub.status.busy": "2024-05-01T02:06:06.021145Z",
     "iopub.status.idle": "2024-05-01T02:06:06.029012Z",
     "shell.execute_reply": "2024-05-01T02:06:06.027390Z"
    },
    "papermill": {
     "duration": 0.036296,
     "end_time": "2024-05-01T02:06:06.031886",
     "exception": false,
     "start_time": "2024-05-01T02:06:05.995590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Store to holiday connection\n",
    "def holiday_TS_list_54(holiday_list):\n",
    "\n",
    "    listofseries = []\n",
    "    \n",
    "    for i in range(0,54):\n",
    "            \n",
    "            holidays_TS = TimeSeries.from_dataframe(list_of_holidays_per_store[i], \n",
    "                                        time_col = 'date',\n",
    "                                        fill_missing_dates=True,\n",
    "                                        fillna_value=0,\n",
    "                                        freq='D')\n",
    "            \n",
    "            holidays_TS = holidays_TS.slice(pd.Timestamp('20130101'),pd.Timestamp('20170831'))\n",
    "            holidays_TS = holidays_TS.astype(np.float32)\n",
    "            listofseries.append(holidays_TS)\n",
    "\n",
    "    return listofseries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c7e61c6",
   "metadata": {
    "papermill": {
     "duration": 0.022976,
     "end_time": "2024-05-01T02:06:06.078650",
     "exception": false,
     "start_time": "2024-05-01T02:06:06.055674",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Apply the functions and normalize."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fe6235f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:06.129488Z",
     "iopub.status.busy": "2024-05-01T02:06:06.128965Z",
     "iopub.status.idle": "2024-05-01T02:06:07.710415Z",
     "shell.execute_reply": "2024-05-01T02:06:07.709516Z"
    },
    "papermill": {
     "duration": 1.610016,
     "end_time": "2024-05-01T02:06:07.712943",
     "exception": false,
     "start_time": "2024-05-01T02:06:06.102927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "list_of_holidays_per_store = holiday_list(df_stores)\n",
    "list_of_holidays_per_store = remove_0_and_duplicates(list_of_holidays_per_store)   \n",
    "list_of_holidays_store = holiday_TS_list_54(list_of_holidays_per_store)\n",
    "\n",
    "holidays_filler = MissingValuesFiller(verbose=False, n_jobs=-1, name=\"Filler\")\n",
    "holidays_scaler = Scaler(verbose=False, n_jobs=-1, name=\"Scaler\")\n",
    "\n",
    "holidays_pipeline = Pipeline([holidays_filler, holidays_scaler])\n",
    "holidays_transformed = holidays_pipeline.fit_transform(list_of_holidays_store)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "741e874e",
   "metadata": {
    "papermill": {
     "duration": 0.021596,
     "end_time": "2024-05-01T02:06:07.757388",
     "exception": false,
     "start_time": "2024-05-01T02:06:07.735792",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is what it looks like for index 100 for the first store"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "02a813bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:07.803346Z",
     "iopub.status.busy": "2024-05-01T02:06:07.802979Z",
     "iopub.status.idle": "2024-05-01T02:06:07.820914Z",
     "shell.execute_reply": "2024-05-01T02:06:07.820077Z"
    },
    "papermill": {
     "duration": 0.043556,
     "end_time": "2024-05-01T02:06:07.822938",
     "exception": false,
     "start_time": "2024-05-01T02:06:07.779382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array(['national_holiday', 'earthquake_relief', 'christmas',\n",
       "       'football_event', 'national_event', 'work_day', 'local_holiday'],\n",
       "      dtype=object)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/darts/timeseries.py:4751: FutureWarning: DatetimeIndex.is_integer is deprecated. Use pandas.api.types.is_integer_dtype instead.\n",
      "  if time_idx.is_integer() and not isinstance(time_idx, pd.RangeIndex):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;TimeSeries (DataArray) (date: 1, component: 7, sample: 1)&gt; Size: 28B\n",
       "array([[[0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.]]], dtype=float32)\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 8B 2013-04-11\n",
       "  * component  (component) object 56B &#x27;national_holiday&#x27; ... &#x27;local_holiday&#x27;\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  None\n",
       "    hierarchy:          None</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>TimeSeries (DataArray)</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>date</span>: 1</li><li><span class='xr-has-index'>component</span>: 7</li><li><span>sample</span>: 1</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-959652f9-0694-4731-92f0-f27ac330d1cb' class='xr-array-in' type='checkbox' checked><label for='section-959652f9-0694-4731-92f0-f27ac330d1cb' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.0 0.0 0.0 0.0 0.0 0.0 0.0</span></div><div class='xr-array-data'><pre>array([[[0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-15de9739-ef09-4699-b6b9-cd40c98126c8' class='xr-section-summary-in' type='checkbox'  checked><label for='section-15de9739-ef09-4699-b6b9-cd40c98126c8' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>date</span></div><div class='xr-var-dims'>(date)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2013-04-11</div><input id='attrs-689146a0-8a00-4b17-af3b-d48003a10544' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-689146a0-8a00-4b17-af3b-d48003a10544' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-36d34b97-24c4-44dc-b43e-351bad889885' class='xr-var-data-in' type='checkbox'><label for='data-36d34b97-24c4-44dc-b43e-351bad889885' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2013-04-11T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>&#x27;national_holiday&#x27; ... &#x27;local_ho...</div><input id='attrs-f72a28a7-eb3d-4ada-bfc5-115c39b9d91a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-f72a28a7-eb3d-4ada-bfc5-115c39b9d91a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-dd49f791-09af-40cf-be1f-dac44648dd43' class='xr-var-data-in' type='checkbox'><label for='data-dd49f791-09af-40cf-be1f-dac44648dd43' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;national_holiday&#x27;, &#x27;earthquake_relief&#x27;, &#x27;christmas&#x27;, &#x27;football_event&#x27;,\n",
       "       &#x27;national_event&#x27;, &#x27;work_day&#x27;, &#x27;local_holiday&#x27;], dtype=object)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-9a801881-3f40-431f-8122-8a330dded3bc' class='xr-section-summary-in' type='checkbox'  ><label for='section-9a801881-3f40-431f-8122-8a330dded3bc' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>date</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-c93d26b7-402e-43a1-b547-5aca1cef77f4' class='xr-index-data-in' type='checkbox'/><label for='index-c93d26b7-402e-43a1-b547-5aca1cef77f4' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2013-04-11&#x27;], dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;date&#x27;, freq=&#x27;D&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-1c58e70a-9759-427f-baad-b97ead791fe4' class='xr-index-data-in' type='checkbox'/><label for='index-1c58e70a-9759-427f-baad-b97ead791fe4' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;national_holiday&#x27;, &#x27;earthquake_relief&#x27;, &#x27;christmas&#x27;, &#x27;football_event&#x27;,\n",
       "       &#x27;national_event&#x27;, &#x27;work_day&#x27;, &#x27;local_holiday&#x27;],\n",
       "      dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-f30090d6-bcef-4eb5-8205-0fe2a89b0c0a' class='xr-section-summary-in' type='checkbox'  checked><label for='section-f30090d6-bcef-4eb5-8205-0fe2a89b0c0a' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>static_covariates :</span></dt><dd>None</dd><dt><span>hierarchy :</span></dt><dd>None</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<TimeSeries (DataArray) (date: 1, component: 7, sample: 1)> Size: 28B\n",
       "array([[[0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.]]], dtype=float32)\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 8B 2013-04-11\n",
       "  * component  (component) object 56B 'national_holiday' ... 'local_holiday'\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  None\n",
       "    hierarchy:          None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(len(holidays_transformed))\n",
    "display(holidays_transformed[0].components.values)\n",
    "display(holidays_transformed[0][100])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc066073",
   "metadata": {
    "papermill": {
     "duration": 0.023025,
     "end_time": "2024-05-01T02:06:07.872967",
     "exception": false,
     "start_time": "2024-05-01T02:06:07.849942",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Promotion**\n",
    "\n",
    "Extracting time series for each product family of the 54 stores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "855b0ab0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:07.920683Z",
     "iopub.status.busy": "2024-05-01T02:06:07.920303Z",
     "iopub.status.idle": "2024-05-01T02:06:40.295673Z",
     "shell.execute_reply": "2024-05-01T02:06:40.294559Z"
    },
    "papermill": {
     "duration": 32.402823,
     "end_time": "2024-05-01T02:06:40.298705",
     "exception": false,
     "start_time": "2024-05-01T02:06:07.895882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_promotion = pd.concat([df_train, df_test], axis=0)\n",
    "df_promotion = df_promotion.sort_values([\"store_nbr\",\"family\",\"date\"])\n",
    "df_promotion.tail()\n",
    "\n",
    "family_promotion_dict = {}\n",
    "\n",
    "for family in family_list:\n",
    "  df_family = df_promotion.loc[df_promotion['family'] == family]\n",
    "\n",
    "  list_of_TS_promo = TimeSeries.from_group_dataframe(\n",
    "                                df_family,\n",
    "                                time_col=\"date\",\n",
    "                                group_cols=[\"store_nbr\",\"family\"],\n",
    "                                value_cols=\"onpromotion\",\n",
    "                                fill_missing_dates=True,\n",
    "                                freq='D')\n",
    "  \n",
    "  for ts in list_of_TS_promo:\n",
    "    ts = ts.astype(np.float32)\n",
    "\n",
    "  family_promotion_dict[family] = list_of_TS_promo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b59bba77",
   "metadata": {
    "papermill": {
     "duration": 0.023596,
     "end_time": "2024-05-01T02:06:40.347122",
     "exception": false,
     "start_time": "2024-05-01T02:06:40.323526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is what looks like for the first store of index 100 and family AUTOMOTIVE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "551ce8a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:40.398871Z",
     "iopub.status.busy": "2024-05-01T02:06:40.398331Z",
     "iopub.status.idle": "2024-05-01T02:06:40.421764Z",
     "shell.execute_reply": "2024-05-01T02:06:40.420521Z"
    },
    "papermill": {
     "duration": 0.052741,
     "end_time": "2024-05-01T02:06:40.424505",
     "exception": false,
     "start_time": "2024-05-01T02:06:40.371764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;TimeSeries (DataArray) (date: 1704, component: 1, sample: 1)&gt; Size: 14kB\n",
       "array([[[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]]])\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 14kB 2013-01-01 2013-01-02 ... 2017-08-31\n",
       "  * component  (component) object 8B &#x27;onpromotion&#x27;\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  static_covariates  store_nbr      family\\ncomponent  ...\n",
       "    hierarchy:          None</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>TimeSeries (DataArray)</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>date</span>: 1704</li><li><span class='xr-has-index'>component</span>: 1</li><li><span>sample</span>: 1</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-43be0442-f6cd-4534-ba17-afaa52e766a9' class='xr-array-in' type='checkbox' checked><label for='section-43be0442-f6cd-4534-ba17-afaa52e766a9' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0</span></div><div class='xr-array-data'><pre>array([[[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]]])</pre></div></div></li><li class='xr-section-item'><input id='section-eaefb0c2-e058-4609-a074-8d8f41beab28' class='xr-section-summary-in' type='checkbox'  checked><label for='section-eaefb0c2-e058-4609-a074-8d8f41beab28' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>date</span></div><div class='xr-var-dims'>(date)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2013-01-01 ... 2017-08-31</div><input id='attrs-8b87980f-2482-4e46-8e51-5d1a378fa679' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-8b87980f-2482-4e46-8e51-5d1a378fa679' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-18605a41-6d1f-4b2e-a733-c7b715b8c925' class='xr-var-data-in' type='checkbox'><label for='data-18605a41-6d1f-4b2e-a733-c7b715b8c925' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2013-01-01T00:00:00.000000000&#x27;, &#x27;2013-01-02T00:00:00.000000000&#x27;,\n",
       "       &#x27;2013-01-03T00:00:00.000000000&#x27;, ..., &#x27;2017-08-29T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-30T00:00:00.000000000&#x27;, &#x27;2017-08-31T00:00:00.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>&#x27;onpromotion&#x27;</div><input id='attrs-9210689f-c564-4481-91e0-d9b511205a2a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9210689f-c564-4481-91e0-d9b511205a2a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c9ebf9d1-0af6-4385-bdca-10587051c018' class='xr-var-data-in' type='checkbox'><label for='data-c9ebf9d1-0af6-4385-bdca-10587051c018' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;onpromotion&#x27;], dtype=object)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-66152d69-5b28-4570-94ba-af5ee0d70ad2' class='xr-section-summary-in' type='checkbox'  ><label for='section-66152d69-5b28-4570-94ba-af5ee0d70ad2' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>date</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-624857df-5337-483b-b447-d7af80afece1' class='xr-index-data-in' type='checkbox'/><label for='index-624857df-5337-483b-b447-d7af80afece1' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,\n",
       "               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;, &#x27;2013-01-07&#x27;, &#x27;2013-01-08&#x27;,\n",
       "               &#x27;2013-01-09&#x27;, &#x27;2013-01-10&#x27;,\n",
       "               ...\n",
       "               &#x27;2017-08-22&#x27;, &#x27;2017-08-23&#x27;, &#x27;2017-08-24&#x27;, &#x27;2017-08-25&#x27;,\n",
       "               &#x27;2017-08-26&#x27;, &#x27;2017-08-27&#x27;, &#x27;2017-08-28&#x27;, &#x27;2017-08-29&#x27;,\n",
       "               &#x27;2017-08-30&#x27;, &#x27;2017-08-31&#x27;],\n",
       "              dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;date&#x27;, length=1704, freq=&#x27;D&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-9775caad-b7b2-40cf-a3a4-6fcdf0743970' class='xr-index-data-in' type='checkbox'/><label for='index-9775caad-b7b2-40cf-a3a4-6fcdf0743970' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;onpromotion&#x27;], dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1ce03a2b-c510-42c0-8b55-897e40ff2b41' class='xr-section-summary-in' type='checkbox'  checked><label for='section-1ce03a2b-c510-42c0-8b55-897e40ff2b41' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>static_covariates :</span></dt><dd>static_covariates  store_nbr      family\n",
       "component                               \n",
       "onpromotion              1.0  AUTOMOTIVE</dd><dt><span>hierarchy :</span></dt><dd>None</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<TimeSeries (DataArray) (date: 1704, component: 1, sample: 1)> Size: 14kB\n",
       "array([[[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]],\n",
       "\n",
       "       [[0.]]])\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 14kB 2013-01-01 2013-01-02 ... 2017-08-31\n",
       "  * component  (component) object 8B 'onpromotion'\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  static_covariates  store_nbr      family\\ncomponent  ...\n",
       "    hierarchy:          None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(family_promotion_dict['AUTOMOTIVE'][0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "375dd965",
   "metadata": {
    "papermill": {
     "duration": 0.025412,
     "end_time": "2024-05-01T02:06:40.475357",
     "exception": false,
     "start_time": "2024-05-01T02:06:40.449945",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Diving a bit deeper we can calculate the moving averages as we did for the oil price."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "655492ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:06:40.531380Z",
     "iopub.status.busy": "2024-05-01T02:06:40.530899Z",
     "iopub.status.idle": "2024-05-01T02:07:47.679622Z",
     "shell.execute_reply": "2024-05-01T02:07:47.678349Z"
    },
    "papermill": {
     "duration": 67.18076,
     "end_time": "2024-05-01T02:07:47.684182",
     "exception": false,
     "start_time": "2024-05-01T02:06:40.503422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [01:07<00:00,  2.03s/it]\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm\n",
    "\n",
    "promotion_transformed_dict = {}\n",
    "\n",
    "for key in tqdm(family_promotion_dict):\n",
    "  promo_filler = MissingValuesFiller(verbose=False, n_jobs=-1, name=\"Fill NAs\")\n",
    "  promo_scaler = Scaler(verbose=False, n_jobs=-1, name=\"Scaling\")\n",
    "\n",
    "  promo_pipeline = Pipeline([promo_filler,\n",
    "                             promo_scaler])\n",
    "  \n",
    "  promotion_transformed = promo_pipeline.fit_transform(family_promotion_dict[key])\n",
    "  \n",
    "  # Moving Averages for Promotion Family Dictionaries\n",
    "  promo_moving_average_7 = MovingAverage(window=7)\n",
    "  promo_moving_average_28 = MovingAverage(window=28)\n",
    "\n",
    "  promotion_covs = []\n",
    "\n",
    "  for ts in promotion_transformed:\n",
    "    ma_7 = promo_moving_average_7.filter(ts)\n",
    "    ma_7 = TimeSeries.from_series(ma_7.pd_series())  \n",
    "    ma_7 = ma_7.astype(np.float32)\n",
    "    ma_7 = ma_7.with_columns_renamed(col_names=ma_7.components, col_names_new=\"promotion_ma_7\")\n",
    "    ma_28 = promo_moving_average_28.filter(ts)\n",
    "    ma_28 = TimeSeries.from_series(ma_28.pd_series())  \n",
    "    ma_28 = ma_28.astype(np.float32)\n",
    "    ma_28 = ma_28.with_columns_renamed(col_names=ma_28.components, col_names_new=\"promotion_ma_28\")\n",
    "    promo_and_mas = ts.stack(ma_7).stack(ma_28)\n",
    "    promotion_covs.append(promo_and_mas)\n",
    "\n",
    "  promotion_transformed_dict[key] = promotion_covs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fce32dc",
   "metadata": {
    "papermill": {
     "duration": 0.025636,
     "end_time": "2024-05-01T02:07:47.736282",
     "exception": false,
     "start_time": "2024-05-01T02:07:47.710646",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is what it looks like for the first index of the family AUTOMOTIVE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b7866393",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:47.790254Z",
     "iopub.status.busy": "2024-05-01T02:07:47.789880Z",
     "iopub.status.idle": "2024-05-01T02:07:47.813109Z",
     "shell.execute_reply": "2024-05-01T02:07:47.812066Z"
    },
    "papermill": {
     "duration": 0.052906,
     "end_time": "2024-05-01T02:07:47.815135",
     "exception": false,
     "start_time": "2024-05-01T02:07:47.762229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['onpromotion', 'promotion_ma_7', 'promotion_ma_28'], dtype=object)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/darts/timeseries.py:4751: FutureWarning: DatetimeIndex.is_integer is deprecated. Use pandas.api.types.is_integer_dtype instead.\n",
      "  if time_idx.is_integer() and not isinstance(time_idx, pd.RangeIndex):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;TimeSeries (DataArray) (date: 1, component: 3, sample: 1)&gt; Size: 24B\n",
       "array([[[0.],\n",
       "        [0.],\n",
       "        [0.]]])\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 8B 2013-01-02\n",
       "  * component  (component) object 24B &#x27;onpromotion&#x27; ... &#x27;promotion_ma_28&#x27;\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  static_covariates  store_nbr      family\\nglobal_comp...\n",
       "    hierarchy:          None</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>TimeSeries (DataArray)</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>date</span>: 1</li><li><span class='xr-has-index'>component</span>: 3</li><li><span>sample</span>: 1</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-ba9a9314-f9a1-494e-8e60-2e56ee0fcb8a' class='xr-array-in' type='checkbox' checked><label for='section-ba9a9314-f9a1-494e-8e60-2e56ee0fcb8a' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.0 0.0 0.0</span></div><div class='xr-array-data'><pre>array([[[0.],\n",
       "        [0.],\n",
       "        [0.]]])</pre></div></div></li><li class='xr-section-item'><input id='section-5d5ee395-6285-424a-b316-1c5c1460915f' class='xr-section-summary-in' type='checkbox'  checked><label for='section-5d5ee395-6285-424a-b316-1c5c1460915f' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>date</span></div><div class='xr-var-dims'>(date)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2013-01-02</div><input id='attrs-5abe11ad-3cd7-487e-9568-a61e3d705a27' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5abe11ad-3cd7-487e-9568-a61e3d705a27' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-63c049d2-192e-4710-be07-835c37b5e33a' class='xr-var-data-in' type='checkbox'><label for='data-63c049d2-192e-4710-be07-835c37b5e33a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2013-01-02T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>&#x27;onpromotion&#x27; ... &#x27;promotion_ma_28&#x27;</div><input id='attrs-554b7db0-574a-4eb8-bd97-b9534ee7de43' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-554b7db0-574a-4eb8-bd97-b9534ee7de43' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5095b45f-96c7-4b92-a107-ded08a6a7e9c' class='xr-var-data-in' type='checkbox'><label for='data-5095b45f-96c7-4b92-a107-ded08a6a7e9c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;onpromotion&#x27;, &#x27;promotion_ma_7&#x27;, &#x27;promotion_ma_28&#x27;], dtype=object)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-4625f6c5-0d6d-4dcc-906e-06d0b00618ef' class='xr-section-summary-in' type='checkbox'  ><label for='section-4625f6c5-0d6d-4dcc-906e-06d0b00618ef' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>date</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-e478c809-8d6a-472b-b401-25d5021262b5' class='xr-index-data-in' type='checkbox'/><label for='index-e478c809-8d6a-472b-b401-25d5021262b5' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2013-01-02&#x27;], dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;date&#x27;, freq=&#x27;D&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-7322a2d5-934f-4a4b-b188-f2dc01827d8a' class='xr-index-data-in' type='checkbox'/><label for='index-7322a2d5-934f-4a4b-b188-f2dc01827d8a' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;onpromotion&#x27;, &#x27;promotion_ma_7&#x27;, &#x27;promotion_ma_28&#x27;], dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-f5b2d8e0-d17e-4d1e-8e0f-4ec4a6e1f8fe' class='xr-section-summary-in' type='checkbox'  checked><label for='section-f5b2d8e0-d17e-4d1e-8e0f-4ec4a6e1f8fe' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>static_covariates :</span></dt><dd>static_covariates  store_nbr      family\n",
       "global_components        1.0  AUTOMOTIVE</dd><dt><span>hierarchy :</span></dt><dd>None</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<TimeSeries (DataArray) (date: 1, component: 3, sample: 1)> Size: 24B\n",
       "array([[[0.],\n",
       "        [0.],\n",
       "        [0.]]])\n",
       "Coordinates:\n",
       "  * date       (date) datetime64[ns] 8B 2013-01-02\n",
       "  * component  (component) object 24B 'onpromotion' ... 'promotion_ma_28'\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  static_covariates  store_nbr      family\\nglobal_comp...\n",
       "    hierarchy:          None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(promotion_transformed_dict['AUTOMOTIVE'][0].components.values)\n",
    "display(promotion_transformed_dict['AUTOMOTIVE'][0][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d5c9d67",
   "metadata": {
    "papermill": {
     "duration": 0.027336,
     "end_time": "2024-05-01T02:07:47.871397",
     "exception": false,
     "start_time": "2024-05-01T02:07:47.844061",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Covariates grouping**\n",
    "\n",
    "Now that we finished with fututre covariates let's group them in the same timeseries, so it's easier to process.\n",
    "\n",
    "Starting with the dates, the oil price and its moving averages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a9bc10ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:47.927521Z",
     "iopub.status.busy": "2024-05-01T02:07:47.926803Z",
     "iopub.status.idle": "2024-05-01T02:07:47.936855Z",
     "shell.execute_reply": "2024-05-01T02:07:47.936020Z"
    },
    "papermill": {
     "duration": 0.04084,
     "end_time": "2024-05-01T02:07:47.939233",
     "exception": false,
     "start_time": "2024-05-01T02:07:47.898393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "general_covariates = time_cov_transformed.stack(oil_transformed).stack(oil_moving_averages)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5166efa9",
   "metadata": {
    "papermill": {
     "duration": 0.035926,
     "end_time": "2024-05-01T02:07:48.009926",
     "exception": false,
     "start_time": "2024-05-01T02:07:47.974000",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Then for each store we get the TimeSeries of the holidays with the general covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5de73777",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:48.071855Z",
     "iopub.status.busy": "2024-05-01T02:07:48.071422Z",
     "iopub.status.idle": "2024-05-01T02:07:48.211807Z",
     "shell.execute_reply": "2024-05-01T02:07:48.211002Z"
    },
    "papermill": {
     "duration": 0.173469,
     "end_time": "2024-05-01T02:07:48.214196",
     "exception": false,
     "start_time": "2024-05-01T02:07:48.040727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "store_covariates_future = []\n",
    "\n",
    "for store in range(0,len(store_list)):\n",
    "  stacked_covariates = holidays_transformed[store].stack(general_covariates)  \n",
    "  store_covariates_future.append(stacked_covariates)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c217194",
   "metadata": {
    "papermill": {
     "duration": 0.027101,
     "end_time": "2024-05-01T02:07:48.268275",
     "exception": false,
     "start_time": "2024-05-01T02:07:48.241174",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Lastly, we combine these with the promotion TimeSeries of each family of each store."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "88e44169",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:48.325303Z",
     "iopub.status.busy": "2024-05-01T02:07:48.324593Z",
     "iopub.status.idle": "2024-05-01T02:07:54.622228Z",
     "shell.execute_reply": "2024-05-01T02:07:54.619894Z"
    },
    "papermill": {
     "duration": 6.328891,
     "end_time": "2024-05-01T02:07:54.624972",
     "exception": false,
     "start_time": "2024-05-01T02:07:48.296081",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [00:06<00:00,  5.25it/s]\n"
     ]
    }
   ],
   "source": [
    "future_covariates_dict = {}\n",
    "\n",
    "for key in tqdm(promotion_transformed_dict):\n",
    "\n",
    "  promotion_family = promotion_transformed_dict[key]\n",
    "  covariates_future = [promotion_family[i].stack(store_covariates_future[i]) for i in range(0,len(promotion_family))]\n",
    "\n",
    "  future_covariates_dict[key] = covariates_future"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b23065d",
   "metadata": {
    "papermill": {
     "duration": 0.031093,
     "end_time": "2024-05-01T02:07:54.687376",
     "exception": false,
     "start_time": "2024-05-01T02:07:54.656283",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "So, we end up with this future covariates TimeSeries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "39bebf3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:54.751562Z",
     "iopub.status.busy": "2024-05-01T02:07:54.751084Z",
     "iopub.status.idle": "2024-05-01T02:07:54.758261Z",
     "shell.execute_reply": "2024-05-01T02:07:54.757473Z"
    },
    "papermill": {
     "duration": 0.041868,
     "end_time": "2024-05-01T02:07:54.760567",
     "exception": false,
     "start_time": "2024-05-01T02:07:54.718699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['onpromotion', 'promotion_ma_7', 'promotion_ma_28', 'national_holiday',\n",
       "       'earthquake_relief', 'christmas', 'football_event', 'national_event',\n",
       "       'work_day', 'local_holiday', 'year', 'month', 'day', 'dayofyear',\n",
       "       'dayofweek', 'weekofyear', 'linear_increase', 'dcoilwtico', 'oil_ma_7',\n",
       "       'oil_ma_28'],\n",
       "      dtype='object', name='component')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(future_covariates_dict['AUTOMOTIVE'][0].components)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b05d6d3d",
   "metadata": {
    "papermill": {
     "duration": 0.033723,
     "end_time": "2024-05-01T02:07:54.826368",
     "exception": false,
     "start_time": "2024-05-01T02:07:54.792645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Transactions**\n",
    "\n",
    "Extracting TimeSeries from transactions and normalizing them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "48a127ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:54.893042Z",
     "iopub.status.busy": "2024-05-01T02:07:54.892537Z",
     "iopub.status.idle": "2024-05-01T02:07:55.686162Z",
     "shell.execute_reply": "2024-05-01T02:07:55.684990Z"
    },
    "papermill": {
     "duration": 0.830464,
     "end_time": "2024-05-01T02:07:55.689040",
     "exception": false,
     "start_time": "2024-05-01T02:07:54.858576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Extracting TimeSeries\n",
    "df_transactions.sort_values([\"store_nbr\",\"date\"], inplace=True)\n",
    "\n",
    "TS_transactions_list = TimeSeries.from_group_dataframe(\n",
    "                                df_transactions,\n",
    "                                time_col=\"date\",\n",
    "                                group_cols=[\"store_nbr\"],\n",
    "                                value_cols=\"transactions\",\n",
    "                                fill_missing_dates=True,\n",
    "                                freq='D')\n",
    "\n",
    "transactions_list = []\n",
    "\n",
    "for ts in TS_transactions_list:\n",
    "            series = TimeSeries.from_series(ts.pd_series())\n",
    "            series = series.astype(np.float32)\n",
    "            transactions_list.append(series)\n",
    "\n",
    "transactions_list[24] = transactions_list[24].slice(start_ts=pd.Timestamp('20130102'), end_ts=pd.Timestamp('20170815'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f5548336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:55.750098Z",
     "iopub.status.busy": "2024-05-01T02:07:55.749682Z",
     "iopub.status.idle": "2024-05-01T02:07:56.669155Z",
     "shell.execute_reply": "2024-05-01T02:07:56.667944Z"
    },
    "papermill": {
     "duration": 0.953253,
     "end_time": "2024-05-01T02:07:56.672063",
     "exception": false,
     "start_time": "2024-05-01T02:07:55.718810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime, timedelta\n",
    "\n",
    "transactions_list_full = []\n",
    "\n",
    "##Filling missing values\n",
    "for ts in transactions_list:\n",
    "  if ts.start_time() > pd.Timestamp('20130101'):\n",
    "    end_time = (ts.start_time() - timedelta(days=1))\n",
    "    delta = end_time - pd.Timestamp('20130101')\n",
    "    zero_series = TimeSeries.from_times_and_values(\n",
    "                              times=pd.date_range(start=pd.Timestamp('20130101'), \n",
    "                              end=end_time, freq=\"D\"),\n",
    "                              values=np.zeros(delta.days+1))\n",
    "    ts = zero_series.append(ts)\n",
    "    ts = ts.with_columns_renamed(col_names=ts.components, col_names_new=\"transactions\")\n",
    "    transactions_list_full.append(ts)\n",
    "\n",
    "##Normalizing\n",
    "transactions_filler = MissingValuesFiller(verbose=False, n_jobs=-1, name=\"Filler\")\n",
    "transactions_scaler = Scaler(verbose=False, n_jobs=-1, name=\"Scaler\")\n",
    "\n",
    "transactions_pipeline = Pipeline([transactions_filler, transactions_scaler])\n",
    "transactions_transformed = transactions_pipeline.fit_transform(transactions_list_full)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c0a20eb",
   "metadata": {
    "papermill": {
     "duration": 0.030877,
     "end_time": "2024-05-01T02:07:56.734469",
     "exception": false,
     "start_time": "2024-05-01T02:07:56.703592",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is what it looks like for the first store."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4afe17d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:56.800313Z",
     "iopub.status.busy": "2024-05-01T02:07:56.799028Z",
     "iopub.status.idle": "2024-05-01T02:07:56.816290Z",
     "shell.execute_reply": "2024-05-01T02:07:56.815031Z"
    },
    "papermill": {
     "duration": 0.053512,
     "end_time": "2024-05-01T02:07:56.818842",
     "exception": false,
     "start_time": "2024-05-01T02:07:56.765330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;TimeSeries (DataArray) (time: 1688, component: 1, sample: 1)&gt; Size: 14kB\n",
       "array([[[0.        ]],\n",
       "\n",
       "       [[0.69831293]],\n",
       "\n",
       "       [[0.60635131]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.13761164]],\n",
       "\n",
       "       [[0.57327158]],\n",
       "\n",
       "       [[0.5600397 ]]])\n",
       "Coordinates:\n",
       "  * time       (time) datetime64[ns] 14kB 2013-01-01 2013-01-02 ... 2017-08-15\n",
       "  * component  (component) object 8B &#x27;transactions&#x27;\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  None\n",
       "    hierarchy:          None</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>TimeSeries (DataArray)</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 1688</li><li><span class='xr-has-index'>component</span>: 1</li><li><span>sample</span>: 1</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-09207e18-4ce7-48f8-ae10-a927bc995aae' class='xr-array-in' type='checkbox' checked><label for='section-09207e18-4ce7-48f8-ae10-a927bc995aae' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.0 0.6983 0.6064 0.6163 0.4992 ... 0.1886 0.3321 0.1376 0.5733 0.56</span></div><div class='xr-array-data'><pre>array([[[0.        ]],\n",
       "\n",
       "       [[0.69831293]],\n",
       "\n",
       "       [[0.60635131]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.13761164]],\n",
       "\n",
       "       [[0.57327158]],\n",
       "\n",
       "       [[0.5600397 ]]])</pre></div></div></li><li class='xr-section-item'><input id='section-cca3a497-2ace-44fe-8700-fefcd4d2c663' class='xr-section-summary-in' type='checkbox'  checked><label for='section-cca3a497-2ace-44fe-8700-fefcd4d2c663' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2013-01-01 ... 2017-08-15</div><input id='attrs-4026f315-119c-45cb-ac3e-3af756523257' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4026f315-119c-45cb-ac3e-3af756523257' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bc0f89a1-2a46-473a-ad19-ecc647cac69c' class='xr-var-data-in' type='checkbox'><label for='data-bc0f89a1-2a46-473a-ad19-ecc647cac69c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2013-01-01T00:00:00.000000000&#x27;, &#x27;2013-01-02T00:00:00.000000000&#x27;,\n",
       "       &#x27;2013-01-03T00:00:00.000000000&#x27;, ..., &#x27;2017-08-13T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-14T00:00:00.000000000&#x27;, &#x27;2017-08-15T00:00:00.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>component</span></div><div class='xr-var-dims'>(component)</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>&#x27;transactions&#x27;</div><input id='attrs-b0facc0a-e629-41e3-a1f7-7a2dfe2a9c90' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-b0facc0a-e629-41e3-a1f7-7a2dfe2a9c90' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e5b5fd26-d730-412e-b8e0-e12df9132e5f' class='xr-var-data-in' type='checkbox'><label for='data-e5b5fd26-d730-412e-b8e0-e12df9132e5f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;transactions&#x27;], dtype=object)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-b9cd4b8d-7f22-4ca1-8ee5-4a36d2450059' class='xr-section-summary-in' type='checkbox'  ><label for='section-b9cd4b8d-7f22-4ca1-8ee5-4a36d2450059' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-0c7252c4-3783-445c-aca7-438ed35d1b90' class='xr-index-data-in' type='checkbox'/><label for='index-0c7252c4-3783-445c-aca7-438ed35d1b90' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2013-01-01&#x27;, &#x27;2013-01-02&#x27;, &#x27;2013-01-03&#x27;, &#x27;2013-01-04&#x27;,\n",
       "               &#x27;2013-01-05&#x27;, &#x27;2013-01-06&#x27;, &#x27;2013-01-07&#x27;, &#x27;2013-01-08&#x27;,\n",
       "               &#x27;2013-01-09&#x27;, &#x27;2013-01-10&#x27;,\n",
       "               ...\n",
       "               &#x27;2017-08-06&#x27;, &#x27;2017-08-07&#x27;, &#x27;2017-08-08&#x27;, &#x27;2017-08-09&#x27;,\n",
       "               &#x27;2017-08-10&#x27;, &#x27;2017-08-11&#x27;, &#x27;2017-08-12&#x27;, &#x27;2017-08-13&#x27;,\n",
       "               &#x27;2017-08-14&#x27;, &#x27;2017-08-15&#x27;],\n",
       "              dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, length=1688, freq=&#x27;D&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>component</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-4c447070-556d-453e-a865-4dda03858c23' class='xr-index-data-in' type='checkbox'/><label for='index-4c447070-556d-453e-a865-4dda03858c23' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([&#x27;transactions&#x27;], dtype=&#x27;object&#x27;, name=&#x27;component&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-4a4db1be-29ec-4b22-b260-9518d4457d48' class='xr-section-summary-in' type='checkbox'  checked><label for='section-4a4db1be-29ec-4b22-b260-9518d4457d48' class='xr-section-summary' >Attributes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>static_covariates :</span></dt><dd>None</dd><dt><span>hierarchy :</span></dt><dd>None</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<TimeSeries (DataArray) (time: 1688, component: 1, sample: 1)> Size: 14kB\n",
       "array([[[0.        ]],\n",
       "\n",
       "       [[0.69831293]],\n",
       "\n",
       "       [[0.60635131]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.13761164]],\n",
       "\n",
       "       [[0.57327158]],\n",
       "\n",
       "       [[0.5600397 ]]])\n",
       "Coordinates:\n",
       "  * time       (time) datetime64[ns] 14kB 2013-01-01 2013-01-02 ... 2017-08-15\n",
       "  * component  (component) object 8B 'transactions'\n",
       "Dimensions without coordinates: sample\n",
       "Attributes:\n",
       "    static_covariates:  None\n",
       "    hierarchy:          None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(transactions_transformed[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ac7e708",
   "metadata": {
    "papermill": {
     "duration": 0.031908,
     "end_time": "2024-05-01T02:07:56.883439",
     "exception": false,
     "start_time": "2024-05-01T02:07:56.851531",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now our preprocessing is done."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0ebdab8",
   "metadata": {
    "papermill": {
     "duration": 0.031944,
     "end_time": "2024-05-01T02:07:56.947109",
     "exception": false,
     "start_time": "2024-05-01T02:07:56.915165",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21cd2169",
   "metadata": {
    "papermill": {
     "duration": 0.031901,
     "end_time": "2024-05-01T02:07:57.012083",
     "exception": false,
     "start_time": "2024-05-01T02:07:56.980182",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Preparing the training data for each product family since we are going to train a model for each one. This model will be the LightGBM which seems to perform well. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "695f0d77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:07:57.078864Z",
     "iopub.status.busy": "2024-05-01T02:07:57.078351Z",
     "iopub.status.idle": "2024-05-01T02:17:56.696946Z",
     "shell.execute_reply": "2024-05-01T02:17:56.696084Z"
    },
    "papermill": {
     "duration": 599.655386,
     "end_time": "2024-05-01T02:17:56.699341",
     "exception": false,
     "start_time": "2024-05-01T02:07:57.043955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Training...'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/33 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.342983 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 43593\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.461126\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  3%|▎         | 1/33 [00:18<09:43, 18.22s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.267321 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 28071\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.026578\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  6%|▌         | 2/33 [00:27<06:49, 13.21s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.357881 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 43474\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.355426\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  9%|▉         | 3/33 [00:46<07:49, 15.64s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.432694 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50508\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.773086\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 12%|█▏        | 4/33 [01:07<08:39, 17.92s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.262520 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 28197\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 439\n",
      "[LightGBM] [Info] Start training from score 0.014777\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 15%|█▌        | 5/33 [01:17<06:55, 14.85s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.353643 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50478\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.780724\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 18%|█▊        | 6/33 [01:38<07:41, 17.10s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.354477 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 46263\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.314515\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 21%|██        | 7/33 [01:56<07:28, 17.24s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.387696 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50508\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.776573\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 24%|██▍       | 8/33 [02:17<07:40, 18.43s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.379499 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50508\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.788500\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 27%|██▋       | 9/33 [02:38<07:42, 19.29s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.458724 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50493\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.783753\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 30%|███       | 10/33 [03:00<07:41, 20.06s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.383039 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 49353\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.725482\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 33%|███▎      | 11/33 [03:19<07:17, 19.87s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.377940 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 49553\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.525365\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 36%|███▋      | 12/33 [03:40<07:04, 20.20s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.376863 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50508\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.781579\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 39%|███▉      | 13/33 [04:02<06:55, 20.76s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.377765 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 41898\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.476225\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 42%|████▏     | 14/33 [04:20<06:19, 20.00s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.376144 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 34592\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.213819\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 45%|████▌     | 15/33 [04:37<05:41, 18.96s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.380794 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 49518\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.368218\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 48%|████▊     | 16/33 [04:55<05:15, 18.57s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.336082 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 47271\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.369973\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 52%|█████▏    | 17/33 [05:13<04:58, 18.67s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.317496 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 27252\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.129950\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 55%|█████▍    | 18/33 [05:27<04:15, 17.04s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.373432 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 49990\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.504206\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 58%|█████▊    | 19/33 [05:46<04:08, 17.78s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.292050 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 44607\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.255837\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 61%|██████    | 20/33 [06:01<03:39, 16.90s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.139352 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 41935\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.217584\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 64%|██████▎   | 21/33 [06:16<03:16, 16.34s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.395832 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 42505\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.399493\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 67%|██████▋   | 22/33 [06:36<03:09, 17.27s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.470625 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 47928\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.494947\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 70%|██████▉   | 23/33 [06:55<02:58, 17.87s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.321101 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40005\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.229199\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 73%|███████▎  | 24/33 [07:12<02:37, 17.51s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.445546 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 49980\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.759462\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 76%|███████▌  | 25/33 [07:32<02:28, 18.55s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.546595 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50387\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.721247\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 79%|███████▉  | 26/33 [07:55<02:17, 19.64s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.151546 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 41475\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.267552\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 82%|████████▏ | 27/33 [08:09<01:49, 18.18s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.342469 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 43464\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.316415\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 85%|████████▍ | 28/33 [08:26<01:29, 17.82s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.381439 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50218\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.731955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 88%|████████▊ | 29/33 [08:47<01:14, 18.66s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.378970 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 46533\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.729706\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 91%|█████████ | 30/33 [09:06<00:56, 18.79s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.393259 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 50508\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.561345\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 94%|█████████▍| 31/33 [09:26<00:38, 19.21s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.308767 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 46005\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.087959\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 97%|█████████▋| 32/33 [09:39<00:17, 17.38s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.428425 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 43458\n",
      "[LightGBM] [Info] Number of data points in the train set: 87750, number of used features: 484\n",
      "[LightGBM] [Info] Start training from score 0.512093\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [09:59<00:00, 18.17s/it]\n"
     ]
    }
   ],
   "source": [
    "from darts.models import LightGBMModel\n",
    "\n",
    "LGBM_Models_Submission = {}\n",
    "\n",
    "display(\"Training...\")\n",
    "\n",
    "for family in tqdm(family_list):\n",
    "  ##Extracting TimeSeries per family and intersecting with future covariates.\n",
    "  sales_family = family_transformed_dict[family]\n",
    "  training_data = [ts for ts in sales_family] \n",
    "  TCN_covariates = future_covariates_dict[family]\n",
    "  train_sliced = [training_data[i].slice_intersect(TCN_covariates[i]) for i in range(0,len(training_data))]\n",
    "  \n",
    "  ##Tunning hyperparameters\n",
    "  LGBM_Model_Submission = LightGBMModel(lags = 63,\n",
    "                                        lags_future_covariates = (14,1),\n",
    "                                        lags_past_covariates = [-16,-17,-18,-19,-20,-21,-22],\n",
    "                                        output_chunk_length=1,\n",
    "                                        random_state=2024,\n",
    "                                        gpu_use_dp= \"false\",\n",
    "                                        )\n",
    "\n",
    "  LGBM_Model_Submission.fit(series=train_sliced, \n",
    "                        future_covariates=TCN_covariates,\n",
    "                        past_covariates=transactions_transformed)\n",
    "  ##Storing trained models\n",
    "  LGBM_Models_Submission[family] = LGBM_Model_Submission"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "548960d9",
   "metadata": {
    "papermill": {
     "duration": 0.033952,
     "end_time": "2024-05-01T02:17:56.768703",
     "exception": false,
     "start_time": "2024-05-01T02:17:56.734751",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In the above code, we only use lags_past_covariates = [-16,-17,-18,-19,-20,-21,-22]. Because during the 16th prediction (the one of August 31, 2017), the values of the past covariates from -1 to -15 are not known.\n",
    "\n",
    "After training, we obtain 33 Machine Learning models stored in LGBM_Models_Submission."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af70f7e5",
   "metadata": {
    "papermill": {
     "duration": 0.034739,
     "end_time": "2024-05-01T02:17:56.838836",
     "exception": false,
     "start_time": "2024-05-01T02:17:56.804097",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Prediction**\n",
    "\n",
    "Using these stored models we can now do our predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6c4c3b49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:17:56.912418Z",
     "iopub.status.busy": "2024-05-01T02:17:56.912010Z",
     "iopub.status.idle": "2024-05-01T02:18:28.532562Z",
     "shell.execute_reply": "2024-05-01T02:18:28.531315Z"
    },
    "papermill": {
     "duration": 31.659642,
     "end_time": "2024-05-01T02:18:28.534715",
     "exception": false,
     "start_time": "2024-05-01T02:17:56.875073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [00:31<00:00,  1.04it/s]\n"
     ]
    }
   ],
   "source": [
    "LGBM_Forecasts_Families_Submission = {}\n",
    "\n",
    "for family in tqdm(family_list):\n",
    "\n",
    "  sales_family = family_transformed_dict[family]\n",
    "  training_data = [ts for ts in sales_family]\n",
    "  LGBM_covariates = future_covariates_dict[family]\n",
    "  train_sliced = [training_data[i].slice_intersect(TCN_covariates[i]) for i in range(0,len(training_data))]\n",
    "\n",
    "  forecast_LGBM = LGBM_Models_Submission[family].predict(n=16,\n",
    "                                         series=train_sliced,\n",
    "                                         future_covariates=LGBM_covariates,\n",
    "                                         past_covariates=transactions_transformed)\n",
    "  \n",
    "  LGBM_Forecasts_Families_Submission[family] = forecast_LGBM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9233c133",
   "metadata": {
    "papermill": {
     "duration": 0.036869,
     "end_time": "2024-05-01T02:18:28.608382",
     "exception": false,
     "start_time": "2024-05-01T02:18:28.571513",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since our data was scaled we need to inverse transform them now for the submission to make sense."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "fba7bd6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:18:28.684517Z",
     "iopub.status.busy": "2024-05-01T02:18:28.684091Z",
     "iopub.status.idle": "2024-05-01T02:18:48.731410Z",
     "shell.execute_reply": "2024-05-01T02:18:48.729771Z"
    },
    "papermill": {
     "duration": 20.087989,
     "end_time": "2024-05-01T02:18:48.733649",
     "exception": false,
     "start_time": "2024-05-01T02:18:28.645660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/33 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/joblib/externals/loky/backend/fork_exec.py:38: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid = os.fork()\n",
      "100%|██████████| 33/33 [00:20<00:00,  1.65it/s]\n"
     ]
    }
   ],
   "source": [
    "LGBM_Forecasts_Families_back_Submission = {}\n",
    "\n",
    "for family in tqdm(family_list):\n",
    "\n",
    "  LGBM_Forecasts_Families_back_Submission[family] = family_pipeline_dict[family].inverse_transform(LGBM_Forecasts_Families_Submission[family], partial=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cc206a0",
   "metadata": {
    "papermill": {
     "duration": 0.038707,
     "end_time": "2024-05-01T02:18:48.811625",
     "exception": false,
     "start_time": "2024-05-01T02:18:48.772918",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now lets go from predicted TimeSeries to predicted DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8974ab1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:18:48.892314Z",
     "iopub.status.busy": "2024-05-01T02:18:48.891151Z",
     "iopub.status.idle": "2024-05-01T02:18:50.824867Z",
     "shell.execute_reply": "2024-05-01T02:18:50.822576Z"
    },
    "papermill": {
     "duration": 1.976386,
     "end_time": "2024-05-01T02:18:50.827141",
     "exception": false,
     "start_time": "2024-05-01T02:18:48.850755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [00:00<00:00, 38.19it/s]\n",
      "100%|██████████| 54/54 [00:00<00:00, 55.78it/s]\n"
     ]
    }
   ],
   "source": [
    "for family in tqdm(LGBM_Forecasts_Families_back_Submission):\n",
    "  for n in range(0,len(LGBM_Forecasts_Families_back_Submission[family])):\n",
    "    if (family_dict[family][n].univariate_values()[-21:] == 0).all():\n",
    "        LGBM_Forecasts_Families_back_Submission[family][n] = LGBM_Forecasts_Families_back_Submission[family][n].map(lambda x: x * 0)\n",
    "\n",
    "listofseries = []\n",
    "\n",
    "for store in tqdm(range(0,54)):\n",
    "  for family in family_list:\n",
    "      oneforecast = LGBM_Forecasts_Families_back_Submission[family][store].pd_dataframe()\n",
    "      oneforecast.columns = ['fcast']\n",
    "      listofseries.append(oneforecast)\n",
    "\n",
    "df_forecasts = pd.concat(listofseries) \n",
    "df_forecasts.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# No Negative Forecasts\n",
    "df_forecasts[df_forecasts < 0] = 0\n",
    "forecasts_kaggle = pd.concat([df_test_sorted, df_forecasts.set_index(df_test_sorted.index)], axis=1)\n",
    "forecasts_kaggle_sorted = forecasts_kaggle.sort_values(by=['id'])\n",
    "forecasts_kaggle_sorted = forecasts_kaggle_sorted.drop(['date','store_nbr','family'], axis=1)\n",
    "forecasts_kaggle_sorted = forecasts_kaggle_sorted.rename(columns={\"fcast\": \"sales\"})\n",
    "forecasts_kaggle_sorted = forecasts_kaggle_sorted.reset_index(drop=True)\n",
    "\n",
    "# Submission\n",
    "submission_kaggle = forecasts_kaggle_sorted"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a9549aa",
   "metadata": {
    "papermill": {
     "duration": 0.040115,
     "end_time": "2024-05-01T02:18:50.907881",
     "exception": false,
     "start_time": "2024-05-01T02:18:50.867766",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This how the predictions look like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "904dd1c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:18:50.990198Z",
     "iopub.status.busy": "2024-05-01T02:18:50.989789Z",
     "iopub.status.idle": "2024-05-01T02:18:51.000040Z",
     "shell.execute_reply": "2024-05-01T02:18:50.999023Z"
    },
    "papermill": {
     "duration": 0.053949,
     "end_time": "2024-05-01T02:18:51.002228",
     "exception": false,
     "start_time": "2024-05-01T02:18:50.948279",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3000888</td>\n",
       "      <td>3.137218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3000889</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3000890</td>\n",
       "      <td>3.962451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3000891</td>\n",
       "      <td>2276.543092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3000892</td>\n",
       "      <td>0.039745</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id        sales\n",
       "0  3000888     3.137218\n",
       "1  3000889     0.000000\n",
       "2  3000890     3.962451\n",
       "3  3000891  2276.543092\n",
       "4  3000892     0.039745"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_kaggle.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75d8aba2",
   "metadata": {
    "papermill": {
     "duration": 0.041534,
     "end_time": "2024-05-01T02:18:51.085885",
     "exception": false,
     "start_time": "2024-05-01T02:18:51.044351",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Ensemble**\n",
    "\n",
    "We created our first submission, however we want to use multiple models and get the best prediction.\n",
    "I'll train another 3 models with the following parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0315bbb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:18:51.169057Z",
     "iopub.status.busy": "2024-05-01T02:18:51.168599Z",
     "iopub.status.idle": "2024-05-01T02:18:51.175326Z",
     "shell.execute_reply": "2024-05-01T02:18:51.174193Z"
    },
    "papermill": {
     "duration": 0.05111,
     "end_time": "2024-05-01T02:18:51.177776",
     "exception": false,
     "start_time": "2024-05-01T02:18:51.126666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_params = [\n",
    "    {\"lags\" : 7, \"lags_future_covariates\" : (16,1), \"lags_past_covariates\" : [-16,-17,-18,-19,-20,-21,-22]},\n",
    "    {\"lags\" : 365, \"lags_future_covariates\" : (14,1), \"lags_past_covariates\" : [-16,-17,-18,-19,-20,-21,-22]},\n",
    "    {\"lags\" : 730, \"lags_future_covariates\" : (14,1), \"lags_past_covariates\" : [-16,-17,-18,-19,-20,-21,-22]}\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff55ebee",
   "metadata": {
    "papermill": {
     "duration": 0.040251,
     "end_time": "2024-05-01T02:18:51.258919",
     "exception": false,
     "start_time": "2024-05-01T02:18:51.218668",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For each of these we will train 33 models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "68ad2b51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T02:18:51.343500Z",
     "iopub.status.busy": "2024-05-01T02:18:51.343084Z",
     "iopub.status.idle": "2024-05-01T03:23:44.304248Z",
     "shell.execute_reply": "2024-05-01T03:23:44.302859Z"
    },
    "papermill": {
     "duration": 3893.00679,
     "end_time": "2024-05-01T03:23:44.307471",
     "exception": false,
     "start_time": "2024-05-01T02:18:51.300681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Training...'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/33 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.337768 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 32715\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.458941\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  3%|▎         | 1/33 [00:15<08:20, 15.63s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.315366 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 26651\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.025924\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  6%|▌         | 2/33 [00:25<06:15, 12.10s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.341008 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 32640\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.353598\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  9%|▉         | 3/33 [00:40<06:50, 13.69s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.380162 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40552\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.769819\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 12%|█▏        | 4/33 [00:59<07:33, 15.64s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.294468 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 26343\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 417\n",
      "[LightGBM] [Info] Start training from score 0.014413\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 15%|█▌        | 5/33 [01:07<06:05, 13.05s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.370625 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40518\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.778669\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 18%|█▊        | 6/33 [01:25<06:38, 14.75s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.348252 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 35741\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.306775\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 21%|██        | 7/33 [01:40<06:18, 14.56s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.382777 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40552\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.774801\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 24%|██▍       | 8/33 [01:58<06:30, 15.62s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.405113 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40552\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.784759\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 27%|██▋       | 9/33 [02:16<06:33, 16.40s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.377711 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40535\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.781394\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 30%|███       | 10/33 [02:34<06:33, 17.11s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.361449 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 39243\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.723088\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 33%|███▎      | 11/33 [02:51<06:15, 17.06s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.365221 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 39470\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.521898\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 36%|███▋      | 12/33 [03:09<06:02, 17.26s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.378539 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40552\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.779461\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 39%|███▉      | 13/33 [03:27<05:51, 17.60s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.321636 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 30794\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.475146\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 42%|████▏     | 14/33 [03:42<05:18, 16.77s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.308093 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 27840\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.212958\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 45%|████▌     | 15/33 [03:55<04:41, 15.65s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.326064 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 39430\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.359156\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 48%|████▊     | 16/33 [04:10<04:22, 15.44s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.336128 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 36883\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.360868\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 52%|█████▏    | 17/33 [04:25<04:05, 15.36s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.305858 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 26560\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.127592\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 55%|█████▍    | 18/33 [04:38<03:37, 14.52s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.348128 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 39964\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.491797\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 58%|█████▊    | 19/33 [04:55<03:34, 15.30s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.303244 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 33716\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.249541\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 61%|██████    | 20/33 [05:08<03:09, 14.55s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.322456 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 30819\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.215305\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 64%|██████▎   | 21/33 [05:23<02:54, 14.56s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.301862 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 31432\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.400568\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 67%|██████▋   | 22/33 [05:37<02:40, 14.63s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.333897 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 37628\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.493120\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 70%|██████▉   | 23/33 [05:54<02:31, 15.17s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.297569 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 28713\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.223558\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 73%|███████▎  | 24/33 [06:07<02:12, 14.74s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.346783 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 39950\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.757832\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 76%|███████▌  | 25/33 [06:25<02:04, 15.58s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.348731 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40415\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.719068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 79%|███████▉  | 26/33 [06:43<01:54, 16.32s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.359565 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 30379\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.260968\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 82%|████████▏ | 27/33 [06:57<01:33, 15.60s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.298358 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 32566\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.308628\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 85%|████████▍ | 28/33 [07:10<01:14, 14.95s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.338444 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40224\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.728949\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 88%|████████▊ | 29/33 [07:28<01:02, 15.63s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.407518 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 36047\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.727739\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 91%|█████████ | 30/33 [07:45<00:48, 16.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.407818 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 40552\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.547530\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 94%|█████████▍| 31/33 [08:01<00:32, 16.07s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.342129 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 35491\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.085795\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 97%|█████████▋| 32/33 [08:12<00:14, 14.74s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.376289 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 32562\n",
      "[LightGBM] [Info] Number of data points in the train set: 89964, number of used features: 468\n",
      "[LightGBM] [Info] Start training from score 0.511920\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [08:29<00:00, 15.44s/it]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Predictions...'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [00:30<00:00,  1.07it/s]\n",
      "  0%|          | 0/33 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/joblib/externals/loky/backend/fork_exec.py:38: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid = os.fork()\n",
      "100%|██████████| 33/33 [00:20<00:00,  1.58it/s]\n",
      "100%|██████████| 33/33 [00:00<00:00, 39.15it/s]\n",
      "100%|██████████| 54/54 [00:01<00:00, 53.55it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Training...'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/33 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.869587 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 120573\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.479965\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  3%|▎         | 1/33 [00:42<22:42, 42.59s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.344725 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 49946\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.032645\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  6%|▌         | 2/33 [01:01<14:56, 28.93s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.840989 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 120235\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.373666\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  9%|▉         | 3/33 [01:43<17:14, 34.48s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.641320 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127488\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.798650\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 12%|█▏        | 4/33 [02:31<19:20, 40.00s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.290613 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 47410\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 683\n",
      "[LightGBM] [Info] Start training from score 0.018150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 15%|█▌        | 5/33 [02:49<15:01, 32.21s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.645536 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127458\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.796086\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 18%|█▊        | 6/33 [03:36<16:45, 37.25s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.207714 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 123243\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.386309\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 21%|██        | 7/33 [04:12<15:54, 36.72s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.604200 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127488\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.790268\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 24%|██▍       | 8/33 [04:58<16:32, 39.71s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.606627 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127488\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.816379\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 27%|██▋       | 9/33 [05:43<16:34, 41.44s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.645130 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127473\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.801463\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 30%|███       | 10/33 [06:30<16:28, 42.99s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.776240 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 126333\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.742374\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 33%|███▎      | 11/33 [07:13<15:48, 43.13s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.953285 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 126533\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.540490\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 36%|███▋      | 12/33 [08:00<15:28, 44.23s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.820129 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127488\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.795748\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 39%|███▉      | 13/33 [08:48<15:04, 45.21s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.763896 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 118878\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.481426\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 42%|████▏     | 14/33 [09:30<14:04, 44.47s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.177905 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 84458\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.223808\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 45%|████▌     | 15/33 [10:01<12:08, 40.45s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.220255 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 126498\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.452271\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 48%|████▊     | 16/33 [10:41<11:20, 40.04s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.195921 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 124251\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.454427\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 52%|█████▏    | 17/33 [11:20<10:35, 39.73s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.520113 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 45640\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.124091\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 55%|█████▍    | 18/33 [11:44<08:48, 35.22s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.177083 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 126970\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.619300\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 58%|█████▊    | 19/33 [12:22<08:25, 36.11s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.253937 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 121587\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.314237\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 61%|██████    | 20/33 [12:54<07:32, 34.78s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.201219 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 118915\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.235538\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 64%|██████▎   | 21/33 [13:30<06:59, 34.99s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.763628 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 119485\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.394983\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 67%|██████▋   | 22/33 [14:12<06:50, 37.31s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.826188 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 124908\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.509079\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 70%|██████▉   | 23/33 [14:58<06:39, 39.94s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.236907 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 116683\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.281518\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 73%|███████▎  | 24/33 [15:32<05:41, 37.90s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.795825 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 126960\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.770727\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 76%|███████▌  | 25/33 [16:16<05:19, 39.92s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.792126 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127367\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.737974\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 79%|███████▉  | 26/33 [17:02<04:51, 41.69s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.239074 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 118349\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.328626\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 82%|████████▏ | 27/33 [17:35<03:53, 38.94s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.172071 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 120444\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.388643\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 85%|████████▍ | 28/33 [18:10<03:09, 37.87s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.781262 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127198\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.753082\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 88%|████████▊ | 29/33 [18:56<02:41, 40.34s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.787583 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 123513\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.746588\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 91%|█████████ | 30/33 [19:41<02:05, 41.70s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.749188 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 127488\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.668846\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 94%|█████████▍| 31/33 [20:23<01:23, 41.91s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.529369 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 122878\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.108038\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 97%|█████████▋| 32/33 [20:52<00:37, 37.97s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.780253 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 120438\n",
      "[LightGBM] [Info] Number of data points in the train set: 71442, number of used features: 786\n",
      "[LightGBM] [Info] Start training from score 0.526287\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [21:36<00:00, 39.27s/it]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Predictions...'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [00:32<00:00,  1.00it/s]\n",
      "  0%|          | 0/33 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/joblib/externals/loky/backend/fork_exec.py:38: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid = os.fork()\n",
      "100%|██████████| 33/33 [00:21<00:00,  1.56it/s]\n",
      "100%|██████████| 33/33 [00:00<00:00, 34.82it/s]\n",
      "100%|██████████| 54/54 [00:01<00:00, 52.79it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Training...'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/33 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.079345 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 213598\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.503515\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  3%|▎         | 1/33 [01:03<33:53, 63.54s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.371528 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 69090\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.042777\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  6%|▌         | 2/33 [01:34<22:53, 44.29s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.014369 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 213123\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.401970\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  9%|▉         | 3/33 [02:35<25:53, 51.78s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.700654 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220513\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.827807\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 12%|█▏        | 4/33 [03:41<27:46, 57.48s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.202690 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 47360\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 668\n",
      "[LightGBM] [Info] Start training from score 0.025065\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 15%|█▌        | 5/33 [04:08<21:47, 46.71s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.858172 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220483\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.820252\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 18%|█▊        | 6/33 [05:15<24:08, 53.64s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.171507 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 216251\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.431917\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 21%|██        | 7/33 [06:13<23:43, 54.76s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.643556 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220513\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.812637\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 24%|██▍       | 8/33 [07:17<24:03, 57.72s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.624445 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220513\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.841332\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 27%|██▋       | 9/33 [08:21<23:57, 59.89s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.800745 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220498\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.827986\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 30%|███       | 10/33 [09:29<23:51, 62.26s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.629797 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 219337\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.761177\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 33%|███▎      | 11/33 [10:34<23:06, 63.03s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.753373 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 219592\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.560880\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 36%|███▋      | 12/33 [11:41<22:30, 64.33s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.729383 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220513\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.819790\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 39%|███▉      | 13/33 [12:48<21:41, 65.10s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.220485 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 211903\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.496713\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 42%|████▏     | 14/33 [13:51<20:27, 64.61s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.189920 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 138426\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.229306\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 45%|████▌     | 15/33 [14:40<17:55, 59.77s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.105916 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 219516\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.522208\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 48%|████▊     | 16/33 [15:45<17:23, 61.39s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.054975 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 217276\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.538907\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 52%|█████▏    | 17/33 [16:47<16:24, 61.56s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.501478 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 66696\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.121265\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 55%|█████▍    | 18/33 [17:23<13:26, 53.76s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.023381 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220030\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.693688\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 58%|█████▊    | 19/33 [18:22<12:58, 55.61s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.279047 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 214450\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.344833\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 61%|██████    | 20/33 [19:12<11:38, 53.73s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.220647 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 211927\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.254016\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 64%|██████▎   | 21/33 [20:06<10:47, 53.98s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.110415 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 212510\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.388906\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 67%|██████▋   | 22/33 [21:09<10:23, 56.68s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.146810 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 217933\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.534026\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 70%|██████▉   | 23/33 [22:15<09:52, 59.28s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.309509 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 209546\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.356684\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 73%|███████▎  | 24/33 [23:03<08:24, 56.07s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.740458 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 219920\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.791719\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 76%|███████▌  | 25/33 [24:09<07:51, 58.97s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.737594 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220406\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.762231\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 79%|███████▉  | 26/33 [25:17<07:12, 61.78s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.290662 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 211296\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.378630\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 82%|████████▏ | 27/33 [26:09<05:52, 58.80s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.251653 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 213445\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.439033\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 85%|████████▍ | 28/33 [27:03<04:46, 57.33s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.779941 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220194\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.770430\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 88%|████████▊ | 29/33 [28:06<03:56, 59.06s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.764781 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 216511\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.773699\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 91%|█████████ | 30/33 [29:12<03:03, 61.22s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.116588 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 220513\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.737046\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 94%|█████████▍| 31/33 [30:13<02:02, 61.10s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.761915 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 215835\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.127643\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 97%|█████████▋| 32/33 [30:58<00:56, 56.20s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 1.160771 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 213439\n",
      "[LightGBM] [Info] Number of data points in the train set: 51732, number of used features: 1136\n",
      "[LightGBM] [Info] Start training from score 0.549995\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [32:01<00:00, 58.22s/it]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Predictions...'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 33/33 [00:33<00:00,  1.00s/it]\n",
      "  0%|          | 0/33 [00:00<?, ?it/s]/opt/conda/lib/python3.10/site-packages/joblib/externals/loky/backend/fork_exec.py:38: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid = os.fork()\n",
      "100%|██████████| 33/33 [00:20<00:00,  1.58it/s]\n",
      "100%|██████████| 33/33 [00:00<00:00, 36.79it/s]\n",
      "100%|██████████| 54/54 [00:01<00:00, 52.70it/s]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_log_error as msle, mean_squared_error as mse\n",
    "from lightgbm import early_stopping\n",
    "\n",
    "submission_kaggle_list = []\n",
    "\n",
    "for params in model_params:\n",
    "\n",
    "  LGBM_Models_Submission = {}\n",
    "\n",
    "  display(\"Training...\")\n",
    "\n",
    "  for family in tqdm(family_list):\n",
    "\n",
    "    # Define Data for family\n",
    "    sales_family = family_transformed_dict[family]\n",
    "    training_data = [ts for ts in sales_family] \n",
    "    TCN_covariates = future_covariates_dict[family]\n",
    "    train_sliced = [training_data[i].slice_intersect(TCN_covariates[i]) for i in range(0,len(training_data))]\n",
    "\n",
    "    LGBM_Model_Submission = LightGBMModel(lags = params[\"lags\"],\n",
    "                                          lags_future_covariates = params[\"lags_future_covariates\"],\n",
    "                                          lags_past_covariates = params[\"lags_past_covariates\"],\n",
    "                                          output_chunk_length=1,\n",
    "                                          random_state=2024,\n",
    "                                          gpu_use_dp= \"false\")\n",
    "      \n",
    "    LGBM_Model_Submission.fit(series=train_sliced, \n",
    "                          future_covariates=TCN_covariates,\n",
    "                          past_covariates=transactions_transformed)\n",
    "\n",
    "    LGBM_Models_Submission[family] = LGBM_Model_Submission\n",
    "    \n",
    "  display(\"Predictions...\")\n",
    "\n",
    "\n",
    "  LGBM_Forecasts_Families_Submission = {}\n",
    "\n",
    "  for family in tqdm(family_list):\n",
    "\n",
    "    sales_family = family_transformed_dict[family]\n",
    "    training_data = [ts for ts in sales_family]\n",
    "    LGBM_covariates = future_covariates_dict[family]\n",
    "    train_sliced = [training_data[i].slice_intersect(TCN_covariates[i]) for i in range(0,len(training_data))]\n",
    "\n",
    "    forecast_LGBM = LGBM_Models_Submission[family].predict(n=16,\n",
    "                                          series=train_sliced,\n",
    "                                          future_covariates=LGBM_covariates,\n",
    "                                          past_covariates=transactions_transformed)\n",
    "    \n",
    "    LGBM_Forecasts_Families_Submission[family] = forecast_LGBM\n",
    "\n",
    "  # Transform Back\n",
    "\n",
    "  LGBM_Forecasts_Families_back_Submission = {}\n",
    "\n",
    "  for family in tqdm(family_list):\n",
    "\n",
    "    LGBM_Forecasts_Families_back_Submission[family] = family_pipeline_dict[family].inverse_transform(LGBM_Forecasts_Families_Submission[family], partial=True)\n",
    "\n",
    "  # Prepare Submission in Correct Format\n",
    "\n",
    "  for family in tqdm(LGBM_Forecasts_Families_back_Submission):\n",
    "    for n in range(0,len(LGBM_Forecasts_Families_back_Submission[family])):\n",
    "      if (family_dict[family][n].univariate_values()[-21:] == 0).all():\n",
    "          LGBM_Forecasts_Families_back_Submission[family][n] = LGBM_Forecasts_Families_back_Submission[family][n].map(lambda x: x * 0)\n",
    "          \n",
    "  listofseries = []\n",
    "\n",
    "  for store in tqdm(range(0,54)):\n",
    "    for family in family_list:\n",
    "        oneforecast = LGBM_Forecasts_Families_back_Submission[family][store].pd_dataframe()\n",
    "        oneforecast.columns = ['fcast']\n",
    "        listofseries.append(oneforecast)\n",
    "\n",
    "  df_forecasts = pd.concat(listofseries) \n",
    "  df_forecasts.reset_index(drop=True, inplace=True)\n",
    "\n",
    "  # No Negative Forecasts\n",
    "  df_forecasts[df_forecasts < 0] = 0\n",
    "  forecasts_kaggle = pd.concat([df_test_sorted, df_forecasts.set_index(df_test_sorted.index)], axis=1)\n",
    "  forecasts_kaggle_sorted = forecasts_kaggle.sort_values(by=['id'])\n",
    "  forecasts_kaggle_sorted = forecasts_kaggle_sorted.drop(['date','store_nbr','family'], axis=1)\n",
    "  forecasts_kaggle_sorted = forecasts_kaggle_sorted.rename(columns={\"fcast\": \"sales\"})\n",
    "  forecasts_kaggle_sorted = forecasts_kaggle_sorted.reset_index(drop=True)\n",
    "\n",
    "  # Submission\n",
    "  submission_kaggle_list.append(forecasts_kaggle_sorted)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "067cb225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T03:23:44.465392Z",
     "iopub.status.busy": "2024-05-01T03:23:44.464880Z",
     "iopub.status.idle": "2024-05-01T03:23:44.481071Z",
     "shell.execute_reply": "2024-05-01T03:23:44.479815Z"
    },
    "papermill": {
     "duration": 0.098792,
     "end_time": "2024-05-01T03:23:44.483809",
     "exception": false,
     "start_time": "2024-05-01T03:23:44.385017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[            id        sales\n",
       " 0      3000888     3.419391\n",
       " 1      3000889     0.000000\n",
       " 2      3000890     3.848118\n",
       " 3      3000891  2191.396295\n",
       " 4      3000892     0.010238\n",
       " ...        ...          ...\n",
       " 28507  3029395   325.976791\n",
       " 28508  3029396   102.224190\n",
       " 28509  3029397  1265.511962\n",
       " 28510  3029398   104.591132\n",
       " 28511  3029399    12.832998\n",
       " \n",
       " [28512 rows x 2 columns],\n",
       "             id        sales\n",
       " 0      3000888     3.457013\n",
       " 1      3000889     0.000000\n",
       " 2      3000890     4.195923\n",
       " 3      3000891  2331.371625\n",
       " 4      3000892     0.027290\n",
       " ...        ...          ...\n",
       " 28507  3029395   350.204302\n",
       " 28508  3029396    94.156008\n",
       " 28509  3029397  1216.702363\n",
       " 28510  3029398   102.962799\n",
       " 28511  3029399    11.197850\n",
       " \n",
       " [28512 rows x 2 columns],\n",
       "             id        sales\n",
       " 0      3000888     3.554371\n",
       " 1      3000889     0.000000\n",
       " 2      3000890     4.596855\n",
       " 3      3000891  2221.329456\n",
       " 4      3000892     0.024509\n",
       " ...        ...          ...\n",
       " 28507  3029395   348.103874\n",
       " 28508  3029396    97.460596\n",
       " 28509  3029397  1226.216496\n",
       " 28510  3029398    92.893609\n",
       " 28511  3029399    13.574906\n",
       " \n",
       " [28512 rows x 2 columns]]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_kaggle_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "35975e24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T03:23:44.641650Z",
     "iopub.status.busy": "2024-05-01T03:23:44.641190Z",
     "iopub.status.idle": "2024-05-01T03:23:44.652923Z",
     "shell.execute_reply": "2024-05-01T03:23:44.651761Z"
    },
    "papermill": {
     "duration": 0.093949,
     "end_time": "2024-05-01T03:23:44.655856",
     "exception": false,
     "start_time": "2024-05-01T03:23:44.561907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "df_sample_submission['sales'] = (submission_kaggle[['sales']]+submission_kaggle_list[0][['sales']]+submission_kaggle_list[1][['sales']]+submission_kaggle_list[2][['sales']])/4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fd659eef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-01T03:23:44.810078Z",
     "iopub.status.busy": "2024-05-01T03:23:44.809612Z",
     "iopub.status.idle": "2024-05-01T03:23:44.890430Z",
     "shell.execute_reply": "2024-05-01T03:23:44.889332Z"
    },
    "papermill": {
     "duration": 0.16167,
     "end_time": "2024-05-01T03:23:44.893356",
     "exception": false,
     "start_time": "2024-05-01T03:23:44.731686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_sample_submission.to_csv('/kaggle/working/submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 2887556,
     "sourceId": 29781,
     "sourceType": "competition"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4779.291568,
   "end_time": "2024-05-01T03:23:47.714111",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-01T02:04:08.422543",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
